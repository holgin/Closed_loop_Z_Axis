
Z_Encoder_PWM_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000605c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006950  08006950  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006950  08006950  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006950  08006950  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000078  080069d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  080069d0  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102fe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002578  00000000  00000000  0003039e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001038  00000000  00000000  00032918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  00033950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f08e  00000000  00000000  00034848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c89b  00000000  00000000  000438d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00050bc8  00000000  00000000  00050171  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a0d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d20  00000000  00000000  000a0db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000081  00000000  00000000  000a4ad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006104 	.word	0x08006104

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006104 	.word	0x08006104

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <send_string>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
	void send_string(char* s)
		{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
			//while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
			HAL_UART_Transmit(&huart1, (uint8_t*)s, strlen(s), 1000);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	0018      	movs	r0, r3
 8000410:	f7ff fe7a 	bl	8000108 <strlen>
 8000414:	0003      	movs	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	23fa      	movs	r3, #250	; 0xfa
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	6879      	ldr	r1, [r7, #4]
 800041e:	4803      	ldr	r0, [pc, #12]	; (800042c <send_string+0x28>)
 8000420:	f004 fd02 	bl	8004e28 <HAL_UART_Transmit>
		}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000420 	.word	0x20000420

08000430 <printData_LCD>:
		sprintf(str, "%ld.%.3ld mm ", calk, przec);
		send_string(str);
		send_string("\n");
	}
	extern void printData_LCD(int32_t enc_um, int32_t SD_um)
	{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
		enc_um = -enc_um;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	425b      	negs	r3, r3
 800043e:	607b      	str	r3, [r7, #4]
		calk = enc_um / 1000;
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	23fa      	movs	r3, #250	; 0xfa
 8000444:	0099      	lsls	r1, r3, #2
 8000446:	0010      	movs	r0, r2
 8000448:	f7ff fef0 	bl	800022c <__divsi3>
 800044c:	0003      	movs	r3, r0
 800044e:	001a      	movs	r2, r3
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <printData_LCD+0xcc>)
 8000452:	601a      	str	r2, [r3, #0]
		przec = (enc_um - calk * 1000);
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <printData_LCD+0xcc>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	0013      	movs	r3, r2
 800045a:	059b      	lsls	r3, r3, #22
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	019b      	lsls	r3, r3, #6
 8000460:	189b      	adds	r3, r3, r2
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	189b      	adds	r3, r3, r2
 8000466:	00db      	lsls	r3, r3, #3
 8000468:	001a      	movs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	18d2      	adds	r2, r2, r3
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <printData_LCD+0xd0>)
 8000470:	601a      	str	r2, [r3, #0]
		//print encoder readout in mm
		sprintf(str, "Enc: %ld.%.3ld mm", calk, przec);
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <printData_LCD+0xcc>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b22      	ldr	r3, [pc, #136]	; (8000500 <printData_LCD+0xd0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4922      	ldr	r1, [pc, #136]	; (8000504 <printData_LCD+0xd4>)
 800047c:	4822      	ldr	r0, [pc, #136]	; (8000508 <printData_LCD+0xd8>)
 800047e:	f005 fa43 	bl	8005908 <siprintf>
		ssd1306_SetCursor(2, 0);
 8000482:	2100      	movs	r1, #0
 8000484:	2002      	movs	r0, #2
 8000486:	f000 ff73 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 800048a:	4a20      	ldr	r2, [pc, #128]	; (800050c <printData_LCD+0xdc>)
 800048c:	481e      	ldr	r0, [pc, #120]	; (8000508 <printData_LCD+0xd8>)
 800048e:	2301      	movs	r3, #1
 8000490:	6811      	ldr	r1, [r2, #0]
 8000492:	6852      	ldr	r2, [r2, #4]
 8000494:	f000 ff42 	bl	800131c <ssd1306_WriteString>
		//calculate position target set by STEP/DIR
		calk = SD_um / 1000;
 8000498:	683a      	ldr	r2, [r7, #0]
 800049a:	23fa      	movs	r3, #250	; 0xfa
 800049c:	0099      	lsls	r1, r3, #2
 800049e:	0010      	movs	r0, r2
 80004a0:	f7ff fec4 	bl	800022c <__divsi3>
 80004a4:	0003      	movs	r3, r0
 80004a6:	001a      	movs	r2, r3
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <printData_LCD+0xcc>)
 80004aa:	601a      	str	r2, [r3, #0]
		przec = (SD_um - calk * 1000);
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <printData_LCD+0xcc>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	0013      	movs	r3, r2
 80004b2:	059b      	lsls	r3, r3, #22
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	019b      	lsls	r3, r3, #6
 80004b8:	189b      	adds	r3, r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	189b      	adds	r3, r3, r2
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	001a      	movs	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	18d2      	adds	r2, r2, r3
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <printData_LCD+0xd0>)
 80004c8:	601a      	str	r2, [r3, #0]
		//print
		sprintf(str, "Set: %ld.%.3ld mm", calk, przec);
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <printData_LCD+0xcc>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <printData_LCD+0xd0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	490f      	ldr	r1, [pc, #60]	; (8000510 <printData_LCD+0xe0>)
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <printData_LCD+0xd8>)
 80004d6:	f005 fa17 	bl	8005908 <siprintf>
		//sprintf(str, "Set: %d steps     ", steps);
		ssd1306_SetCursor(2, 15);
 80004da:	210f      	movs	r1, #15
 80004dc:	2002      	movs	r0, #2
 80004de:	f000 ff47 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <printData_LCD+0xdc>)
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <printData_LCD+0xd8>)
 80004e6:	2301      	movs	r3, #1
 80004e8:	6811      	ldr	r1, [r2, #0]
 80004ea:	6852      	ldr	r2, [r2, #4]
 80004ec:	f000 ff16 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80004f0:	f000 fdde 	bl	80010b0 <ssd1306_UpdateScreen>
	}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200000a8 	.word	0x200000a8
 8000500:	200000ac 	.word	0x200000ac
 8000504:	08006130 	.word	0x08006130
 8000508:	20000520 	.word	0x20000520
 800050c:	20000000 	.word	0x20000000
 8000510:	08006144 	.word	0x08006144

08000514 <printData_LCD_rotary>:
	extern void printData_LCD_rotary(int32_t enc_CNT, int32_t SD_um)
	{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
		enc_CNT = -enc_CNT;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	425b      	negs	r3, r3
 8000522:	607b      	str	r3, [r7, #4]
		//print encoder readout
		sprintf(str, "Enc: %ld cnts    ", enc_CNT);
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4921      	ldr	r1, [pc, #132]	; (80005ac <printData_LCD_rotary+0x98>)
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <printData_LCD_rotary+0x9c>)
 800052a:	0018      	movs	r0, r3
 800052c:	f005 f9ec 	bl	8005908 <siprintf>
		ssd1306_SetCursor(2, 0);
 8000530:	2100      	movs	r1, #0
 8000532:	2002      	movs	r0, #2
 8000534:	f000 ff1c 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8000538:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <printData_LCD_rotary+0xa0>)
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <printData_LCD_rotary+0x9c>)
 800053c:	2301      	movs	r3, #1
 800053e:	6811      	ldr	r1, [r2, #0]
 8000540:	6852      	ldr	r2, [r2, #4]
 8000542:	f000 feeb 	bl	800131c <ssd1306_WriteString>
		//calculate position target set by STEP/DIR
		calk = SD_um / 1000;
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	23fa      	movs	r3, #250	; 0xfa
 800054a:	0099      	lsls	r1, r3, #2
 800054c:	0010      	movs	r0, r2
 800054e:	f7ff fe6d 	bl	800022c <__divsi3>
 8000552:	0003      	movs	r3, r0
 8000554:	001a      	movs	r2, r3
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <printData_LCD_rotary+0xa4>)
 8000558:	601a      	str	r2, [r3, #0]
		przec = (SD_um - calk * 1000);
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <printData_LCD_rotary+0xa4>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	0013      	movs	r3, r2
 8000560:	059b      	lsls	r3, r3, #22
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	189b      	adds	r3, r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	189b      	adds	r3, r3, r2
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	001a      	movs	r2, r3
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	18d2      	adds	r2, r2, r3
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <printData_LCD_rotary+0xa8>)
 8000576:	601a      	str	r2, [r3, #0]
		//print
		sprintf(str, "Set: %ld.%.3ld mm", calk, przec);
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <printData_LCD_rotary+0xa4>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <printData_LCD_rotary+0xa8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	490f      	ldr	r1, [pc, #60]	; (80005c0 <printData_LCD_rotary+0xac>)
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <printData_LCD_rotary+0x9c>)
 8000584:	f005 f9c0 	bl	8005908 <siprintf>
		//sprintf(str, "Set: %d steps     ", steps);
		ssd1306_SetCursor(2, 15);
 8000588:	210f      	movs	r1, #15
 800058a:	2002      	movs	r0, #2
 800058c:	f000 fef0 	bl	8001370 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_7x10, White);
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <printData_LCD_rotary+0xa0>)
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <printData_LCD_rotary+0x9c>)
 8000594:	2301      	movs	r3, #1
 8000596:	6811      	ldr	r1, [r2, #0]
 8000598:	6852      	ldr	r2, [r2, #4]
 800059a:	f000 febf 	bl	800131c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800059e:	f000 fd87 	bl	80010b0 <ssd1306_UpdateScreen>
	}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	08006158 	.word	0x08006158
 80005b0:	20000520 	.word	0x20000520
 80005b4:	20000000 	.word	0x20000000
 80005b8:	200000a8 	.word	0x200000a8
 80005bc:	200000ac 	.word	0x200000ac
 80005c0:	08006144 	.word	0x08006144

080005c4 <print_RAW>:
	extern void print_RAW(int32_t cnt)
	{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
		sprintf(str, "%ld counts", cnt);
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <print_RAW+0x2c>)
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <print_RAW+0x30>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f005 f998 	bl	8005908 <siprintf>
		send_string(str);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <print_RAW+0x30>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ff12 	bl	8000404 <send_string>
		send_string("\n");
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <print_RAW+0x34>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff ff0e 	bl	8000404 <send_string>
	}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0800616c 	.word	0x0800616c
 80005f4:	20000520 	.word	0x20000520
 80005f8:	0800612c 	.word	0x0800612c

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f001 faa4 	bl	8001b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f8ca 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 fc0c 	bl	8000e24 <MX_GPIO_Init>
  MX_DMA_Init();
 800060c:	f000 fbec 	bl	8000de8 <MX_DMA_Init>
  MX_TIM2_Init();
 8000610:	f000 fa58 	bl	8000ac4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000614:	f000 fbb8 	bl	8000d88 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000618:	f000 fab6 	bl	8000b88 <MX_TIM3_Init>
  MX_TIM1_Init();
 800061c:	f000 f9a0 	bl	8000960 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000620:	f000 f956 	bl	80008d0 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000624:	f000 fb5c 	bl	8000ce0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000628:	f000 fb84 	bl	8000d34 <MX_TIM17_Init>
  MX_TIM14_Init();
 800062c:	f000 fb06 	bl	8000c3c <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000630:	f000 f918 	bl	8000864 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000634:	4b48      	ldr	r3, [pc, #288]	; (8000758 <main+0x15c>)
 8000636:	2100      	movs	r1, #0
 8000638:	0018      	movs	r0, r3
 800063a:	f003 f9cd 	bl	80039d8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 800063e:	4b46      	ldr	r3, [pc, #280]	; (8000758 <main+0x15c>)
 8000640:	2104      	movs	r1, #4
 8000642:	0018      	movs	r0, r3
 8000644:	f003 f9c8 	bl	80039d8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, 1);
 8000648:	4b44      	ldr	r3, [pc, #272]	; (800075c <main+0x160>)
 800064a:	2101      	movs	r1, #1
 800064c:	0018      	movs	r0, r3
 800064e:	f003 faa9 	bl	8003ba4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <main+0x164>)
 8000654:	0018      	movs	r0, r3
 8000656:	f003 f891 	bl	800377c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800065a:	4b42      	ldr	r3, [pc, #264]	; (8000764 <main+0x168>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f003 f8e2 	bl	8003828 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8000664:	4b40      	ldr	r3, [pc, #256]	; (8000768 <main+0x16c>)
 8000666:	0018      	movs	r0, r3
 8000668:	f003 f888 	bl	800377c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 800066c:	4b3f      	ldr	r3, [pc, #252]	; (800076c <main+0x170>)
 800066e:	0018      	movs	r0, r3
 8000670:	f003 f884 	bl	800377c <HAL_TIM_Base_Start_IT>



  ssd1306_Init();
 8000674:	f000 fc8c 	bl	8000f90 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fcf5 	bl	8001068 <ssd1306_Fill>
  printData_LCD(encPos, setPos);
 800067e:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <main+0x174>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <main+0x178>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	0019      	movs	r1, r3
 8000688:	0010      	movs	r0, r2
 800068a:	f7ff fed1 	bl	8000430 <printData_LCD>
  //HAL_NVIC_EnableIRQ(TIM1_IRQ);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setPos = 0; //reset variables to be sure
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <main+0x178>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
  T3_ov_cnt = 10; //offset to simulate negative values
 8000694:	4b38      	ldr	r3, [pc, #224]	; (8000778 <main+0x17c>)
 8000696:	220a      	movs	r2, #10
 8000698:	601a      	str	r2, [r3, #0]
  TIM2->CNT = TIMER_OFFSET; //bring the counter somewhere to the middle
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	4a37      	ldr	r2, [pc, #220]	; (800077c <main+0x180>)
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//encPos = 5 * (TIM2->CNT - TIMER_OFFSET); //read the value from the Linear Encoder
	rotaryCNT = (TIM2->CNT - TIMER_OFFSET); //ready the CNTs from the Rotary Encoder
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a8:	4a35      	ldr	r2, [pc, #212]	; (8000780 <main+0x184>)
 80006aa:	4694      	mov	ip, r2
 80006ac:	4463      	add	r3, ip
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <main+0x188>)
 80006b2:	601a      	str	r2, [r3, #0]
	//setPos = (TimerOV * T3_ov_cnt) + TIM3->CNT; //read the value from the STEPDIR encoder and calculate

	setPos = ((((TimerOV * T3_ov_cnt) + TIM3->CNT) * 10) >> 4) - 400000; // divide by 16;
 80006b4:	4b30      	ldr	r3, [pc, #192]	; (8000778 <main+0x17c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	0013      	movs	r3, r2
 80006ba:	015b      	lsls	r3, r3, #5
 80006bc:	1a9b      	subs	r3, r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	189b      	adds	r3, r3, r2
 80006c2:	025b      	lsls	r3, r3, #9
 80006c4:	001a      	movs	r2, r3
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <main+0x18c>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ca:	18d2      	adds	r2, r2, r3
 80006cc:	0013      	movs	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	189b      	adds	r3, r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <main+0x190>)
 80006d8:	4694      	mov	ip, r2
 80006da:	4463      	add	r3, ip
 80006dc:	001a      	movs	r2, r3
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <main+0x178>)
 80006e0:	601a      	str	r2, [r3, #0]
	//get the timer counts and add previous Overflows, apply the offset; then calculate it for micrometers

//--------------------------------------------------------------------------------
	// OUTPUT STEPDIR HANDLER

	error = setPos - encPos; //calculate error
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <main+0x178>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <main+0x174>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1ad2      	subs	r2, r2, r3
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <main+0x194>)
 80006ee:	601a      	str	r2, [r3, #0]

	if ((error) > 0) //handle DIR output
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <main+0x194>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dd08      	ble.n	800070a <main+0x10e>
		{
			HAL_GPIO_WritePin(GPIOA, DIR_OUT_Pin, SET); //DIR HIGH
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	0059      	lsls	r1, r3, #1
 80006fc:	2390      	movs	r3, #144	; 0x90
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2201      	movs	r2, #1
 8000702:	0018      	movs	r0, r3
 8000704:	f001 fe57 	bl	80023b6 <HAL_GPIO_WritePin>
 8000708:	e007      	b.n	800071a <main+0x11e>
		} else {
			HAL_GPIO_WritePin(GPIOA, DIR_OUT_Pin, RESET); //DIR LOW
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	0059      	lsls	r1, r3, #1
 800070e:	2390      	movs	r3, #144	; 0x90
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2200      	movs	r2, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fe4e 	bl	80023b6 <HAL_GPIO_WritePin>
		}

	if (error != 0)
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <main+0x194>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d013      	beq.n	800074a <main+0x14e>
	{
		if (oldPos != TIM3->CNT)
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <main+0x18c>)
 8000724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <main+0x198>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d007      	beq.n	800073e <main+0x142>
			{
				oldPos = TIM3->CNT; //reset state
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <main+0x18c>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	001a      	movs	r2, r3
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <main+0x198>)
 8000736:	601a      	str	r2, [r3, #0]
				TIM17->ARR = 0; //reset timer
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x19c>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
			}


		HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <main+0x168>)
 8000740:	2100      	movs	r1, #0
 8000742:	0018      	movs	r0, r3
 8000744:	f003 f870 	bl	8003828 <HAL_TIM_PWM_Start>
 8000748:	e7ab      	b.n	80006a2 <main+0xa6>
	} else {
		HAL_TIM_PWM_Stop(&htim14, TIM_CHANNEL_1);
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <main+0x168>)
 800074c:	2100      	movs	r1, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f003 f8b0 	bl	80038b4 <HAL_TIM_PWM_Stop>
	rotaryCNT = (TIM2->CNT - TIMER_OFFSET); //ready the CNTs from the Rotary Encoder
 8000754:	e7a5      	b.n	80006a2 <main+0xa6>
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	200004a0 	.word	0x200004a0
 800075c:	200004e0 	.word	0x200004e0
 8000760:	200003e0 	.word	0x200003e0
 8000764:	20000538 	.word	0x20000538
 8000768:	20000578 	.word	0x20000578
 800076c:	200003a0 	.word	0x200003a0
 8000770:	20000098 	.word	0x20000098
 8000774:	200000a0 	.word	0x200000a0
 8000778:	200000b0 	.word	0x200000b0
 800077c:	77359400 	.word	0x77359400
 8000780:	88ca6c00 	.word	0x88ca6c00
 8000784:	20000094 	.word	0x20000094
 8000788:	40000400 	.word	0x40000400
 800078c:	fff9e580 	.word	0xfff9e580
 8000790:	200000a4 	.word	0x200000a4
 8000794:	2000009c 	.word	0x2000009c
 8000798:	40014800 	.word	0x40014800

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b095      	sub	sp, #84	; 0x54
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	2420      	movs	r4, #32
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2330      	movs	r3, #48	; 0x30
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f005 f8a2 	bl	80058f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b2:	2310      	movs	r3, #16
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	0018      	movs	r0, r3
 80007b8:	2310      	movs	r3, #16
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f005 f89a 	bl	80058f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c2:	003b      	movs	r3, r7
 80007c4:	0018      	movs	r0, r3
 80007c6:	2310      	movs	r3, #16
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f005 f893 	bl	80058f6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	0021      	movs	r1, r4
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2201      	movs	r2, #1
 80007dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2210      	movs	r2, #16
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	22a0      	movs	r2, #160	; 0xa0
 80007f4:	0392      	lsls	r2, r2, #14
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	0018      	movs	r0, r3
 8000802:	f002 fa53 	bl	8002cac <HAL_RCC_OscConfig>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800080a:	f000 fb83 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	2110      	movs	r1, #16
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2207      	movs	r2, #7
 8000814:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2101      	movs	r1, #1
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fd59 	bl	80032e4 <HAL_RCC_ClockConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000836:	f000 fb6d 	bl	8000f14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800083a:	003b      	movs	r3, r7
 800083c:	2221      	movs	r2, #33	; 0x21
 800083e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000840:	003b      	movs	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	003b      	movs	r3, r7
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fe9a 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000858:	f000 fb5c 	bl	8000f14 <Error_Handler>
  }
}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b015      	add	sp, #84	; 0x54
 8000862:	bd90      	pop	{r4, r7, pc}

08000864 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2007      	movs	r0, #7
 800086e:	f001 fa9f 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000872:	2007      	movs	r0, #7
 8000874:	f001 fab1 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	2010      	movs	r0, #16
 800087e:	f001 fa97 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000882:	2010      	movs	r0, #16
 8000884:	f001 faa9 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2016      	movs	r0, #22
 800088e:	f001 fa8f 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000892:	2016      	movs	r0, #22
 8000894:	f001 faa1 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2103      	movs	r1, #3
 800089c:	2015      	movs	r0, #21
 800089e:	f001 fa87 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80008a2:	2015      	movs	r0, #21
 80008a4:	f001 fa99 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_UP_TRG_COM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	200d      	movs	r0, #13
 80008ae:	f001 fa7f 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80008b2:	200d      	movs	r0, #13
 80008b4:	f001 fa91 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	200e      	movs	r0, #14
 80008be:	f001 fa77 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80008c2:	200e      	movs	r0, #14
 80008c4:	f001 fa89 	bl	8001dda <HAL_NVIC_EnableIRQ>
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_I2C1_Init+0x84>)
 80008d6:	4a20      	ldr	r2, [pc, #128]	; (8000958 <MX_I2C1_Init+0x88>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_I2C1_Init+0x84>)
 80008dc:	2201      	movs	r2, #1
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_I2C1_Init+0x84>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_I2C1_Init+0x84>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_I2C1_Init+0x84>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_I2C1_Init+0x84>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_I2C1_Init+0x84>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_I2C1_Init+0x84>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_I2C1_Init+0x84>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C1_Init+0x84>)
 800090c:	0018      	movs	r0, r3
 800090e:	f001 fd95 	bl	800243c <HAL_I2C_Init>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 fafd 	bl	8000f14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C1_Init+0x84>)
 800091c:	2100      	movs	r1, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f92c 	bl	8002b7c <HAL_I2CEx_ConfigAnalogFilter>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 faf4 	bl	8000f14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C1_Init+0x84>)
 800092e:	2100      	movs	r1, #0
 8000930:	0018      	movs	r0, r3
 8000932:	f002 f96f 	bl	8002c14 <HAL_I2CEx_ConfigDigitalFilter>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 faeb 	bl	8000f14 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_I2C1_Init+0x8c>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2C1_Init+0x8c>)
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	0349      	lsls	r1, r1, #13
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	200002cc 	.word	0x200002cc
 8000958:	40005400 	.word	0x40005400
 800095c:	40010000 	.word	0x40010000

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b090      	sub	sp, #64	; 0x40
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	2330      	movs	r3, #48	; 0x30
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	0018      	movs	r0, r3
 800096c:	2310      	movs	r3, #16
 800096e:	001a      	movs	r2, r3
 8000970:	2100      	movs	r1, #0
 8000972:	f004 ffc0 	bl	80058f6 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000976:	231c      	movs	r3, #28
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	0018      	movs	r0, r3
 800097c:	2314      	movs	r3, #20
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f004 ffb8 	bl	80058f6 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000986:	230c      	movs	r3, #12
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	2310      	movs	r3, #16
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f004 ffb0 	bl	80058f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	0018      	movs	r0, r3
 800099a:	2308      	movs	r3, #8
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f004 ffa9 	bl	80058f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a4:	4b44      	ldr	r3, [pc, #272]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009a6:	4a45      	ldr	r2, [pc, #276]	; (8000abc <MX_TIM1_Init+0x15c>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 29999;
 80009b6:	4b40      	ldr	r3, [pc, #256]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009b8:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <MX_TIM1_Init+0x160>)
 80009ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c2:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f002 fea7 	bl	8003724 <HAL_TIM_Base_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80009da:	f000 fa9b 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	2130      	movs	r1, #48	; 0x30
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	0152      	lsls	r2, r2, #5
 80009e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e8:	187a      	adds	r2, r7, r1
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f003 fb7c 	bl	80040ec <HAL_TIM_ConfigClockSource>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80009f8:	f000 fa8c 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_TIM1_Init+0x158>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 ffb6 	bl	8003970 <HAL_TIM_IC_Init>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a08:	f000 fa84 	bl	8000f14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a0c:	211c      	movs	r1, #28
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2204      	movs	r2, #4
 8000a12:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2260      	movs	r2, #96	; 0x60
 8000a18:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_TIM1_Init+0x158>)
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f003 fc18 	bl	8004268 <HAL_TIM_SlaveConfigSynchro>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000a3c:	f000 fa6a 	bl	8000f14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a40:	210c      	movs	r1, #12
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	1879      	adds	r1, r7, r1
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_TIM1_Init+0x158>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	0018      	movs	r0, r3
 8000a62:	f003 f9ed 	bl	8003e40 <HAL_TIM_IC_ConfigChannel>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000a6a:	f000 fa53 	bl	8000f14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a6e:	210c      	movs	r1, #12
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2202      	movs	r2, #2
 8000a74:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2201      	movs	r2, #1
 8000a7a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a7c:	1879      	adds	r1, r7, r1
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_TIM1_Init+0x158>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	0018      	movs	r0, r3
 8000a84:	f003 f9dc 	bl	8003e40 <HAL_TIM_IC_ConfigChannel>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000a8c:	f000 fa42 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9c:	1d3a      	adds	r2, r7, #4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_TIM1_Init+0x158>)
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f004 f904 	bl	8004cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000aac:	f000 fa32 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b010      	add	sp, #64	; 0x40
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200004a0 	.word	0x200004a0
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	0000752f 	.word	0x0000752f

08000ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b08d      	sub	sp, #52	; 0x34
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aca:	240c      	movs	r4, #12
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	0018      	movs	r0, r3
 8000ad0:	2324      	movs	r3, #36	; 0x24
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f004 ff0e 	bl	80058f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	0018      	movs	r0, r3
 8000ade:	2308      	movs	r3, #8
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f004 ff07 	bl	80058f6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	05d2      	lsls	r2, r2, #23
 8000aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	4252      	negs	r2, r2
 8000b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b10:	0021      	movs	r1, r4
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2203      	movs	r2, #3
 8000b16:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2201      	movs	r2, #1
 8000b22:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2201      	movs	r2, #1
 8000b3a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 ff94 	bl	8003a7c <HAL_TIM_Encoder_Init>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b58:	f000 f9dc 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b68:	1d3a      	adds	r2, r7, #4
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_TIM2_Init+0xc0>)
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f004 f89e 	bl	8004cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000b78:	f000 f9cc 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b00d      	add	sp, #52	; 0x34
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	200004e0 	.word	0x200004e0

08000b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b8e:	230c      	movs	r3, #12
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	0018      	movs	r0, r3
 8000b94:	2314      	movs	r3, #20
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f004 feac 	bl	80058f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f004 fea5 	bl	80058f6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bae:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xac>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64000-1;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <MX_TIM3_Init+0xb0>)
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fda6 	bl	8003724 <HAL_TIM_Base_Init>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 f99a 	bl	8000f14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000be0:	210c      	movs	r1, #12
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2240      	movs	r2, #64	; 0x40
 8000bec:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerFilter = 0;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000bf4:	187a      	adds	r2, r7, r1
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f003 fb34 	bl	8004268 <HAL_TIM_SlaveConfigSynchro>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000c04:	f000 f986 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c14:	1d3a      	adds	r2, r7, #4
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f004 f848 	bl	8004cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000c24:	f000 f976 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b008      	add	sp, #32
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200003e0 	.word	0x200003e0
 8000c34:	40000400 	.word	0x40000400
 8000c38:	0000f9ff 	.word	0x0000f9ff

08000c3c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	0018      	movs	r0, r3
 8000c46:	231c      	movs	r3, #28
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f004 fe53 	bl	80058f6 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <MX_TIM14_Init+0x9c>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 29999;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c64:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <MX_TIM14_Init+0xa0>)
 8000c66:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f002 fd54 	bl	8003724 <HAL_TIM_Base_Init>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000c80:	f000 f948 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 fd9a 	bl	80037c0 <HAL_TIM_PWM_Init>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 f940 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2260      	movs	r2, #96	; 0x60
 8000c98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	22fa      	movs	r2, #250	; 0xfa
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cae:	1d39      	adds	r1, r7, #4
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f003 f961 	bl	8003f7c <HAL_TIM_PWM_ConfigChannel>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8000cbe:	f000 f929 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <MX_TIM14_Init+0x98>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fd91 	bl	80017ec <HAL_TIM_MspPostInit>

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b008      	add	sp, #32
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000538 	.word	0x20000538
 8000cd8:	40002000 	.word	0x40002000
 8000cdc:	0000752f 	.word	0x0000752f

08000ce0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <MX_TIM16_Init+0x48>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4799;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <MX_TIM16_Init+0x4c>)
 8000cee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000cf8:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <MX_TIM16_Init+0x50>)
 8000cfa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000d10:	0018      	movs	r0, r3
 8000d12:	f002 fd07 	bl	8003724 <HAL_TIM_Base_Init>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000d1a:	f000 f8fb 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000578 	.word	0x20000578
 8000d28:	40014400 	.word	0x40014400
 8000d2c:	000012bf 	.word	0x000012bf
 8000d30:	000003e7 	.word	0x000003e7

08000d34 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <MX_TIM17_Init+0x4c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 479;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d40:	22e0      	movs	r2, #224	; 0xe0
 8000d42:	32ff      	adds	r2, #255	; 0xff
 8000d44:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 899;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <MX_TIM17_Init+0x50>)
 8000d50:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <MX_TIM17_Init+0x48>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f002 fcdc 	bl	8003724 <HAL_TIM_Base_Init>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000d70:	f000 f8d0 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	200003a0 	.word	0x200003a0
 8000d80:	40014800 	.word	0x40014800
 8000d84:	00000383 	.word	0x00000383

08000d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000d8e:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <MX_USART1_UART_Init+0x5c>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000d94:	22e1      	movs	r2, #225	; 0xe1
 8000d96:	0252      	lsls	r2, r2, #9
 8000d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <MX_USART1_UART_Init+0x58>)
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f003 ffd7 	bl	8004d80 <HAL_UART_Init>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dd6:	f000 f89d 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000420 	.word	0x20000420
 8000de4:	40013800 	.word	0x40013800

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_DMA_Init+0x38>)
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_DMA_Init+0x38>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	430a      	orrs	r2, r1
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_DMA_Init+0x38>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4013      	ands	r3, r2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f000 ffd0 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e10:	200a      	movs	r0, #10
 8000e12:	f000 ffe2 	bl	8001dda <HAL_NVIC_EnableIRQ>

}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	40021000 	.word	0x40021000

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	240c      	movs	r4, #12
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2314      	movs	r3, #20
 8000e32:	001a      	movs	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	f004 fd5e 	bl	80058f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <MX_GPIO_Init+0xe4>)
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <MX_GPIO_Init+0xe4>)
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	0289      	lsls	r1, r1, #10
 8000e44:	430a      	orrs	r2, r1
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <MX_GPIO_Init+0xe4>)
 8000e4a:	695a      	ldr	r2, [r3, #20]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	029b      	lsls	r3, r3, #10
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <MX_GPIO_Init+0xe4>)
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_GPIO_Init+0xe4>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	02c9      	lsls	r1, r1, #11
 8000e60:	430a      	orrs	r2, r1
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <MX_GPIO_Init+0xe4>)
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	02db      	lsls	r3, r3, #11
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_GPIO_Init+0xe8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	2101      	movs	r1, #1
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 fa9c 	bl	80023b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_OUT_GPIO_Port, DIR_OUT_Pin, GPIO_PIN_RESET);
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	0059      	lsls	r1, r3, #1
 8000e82:	2390      	movs	r3, #144	; 0x90
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	2200      	movs	r2, #0
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 fa94 	bl	80023b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_IN_Pin */
  GPIO_InitStruct.Pin = DIR_IN_Pin;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2210      	movs	r2, #16
 8000e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <MX_GPIO_Init+0xec>)
 8000e98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIR_IN_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	193a      	adds	r2, r7, r4
 8000ea2:	2390      	movs	r3, #144	; 0x90
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 f8ff 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000eae:	0021      	movs	r1, r4
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	000c      	movs	r4, r1
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <MX_GPIO_Init+0xe8>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f001 f8eb 	bl	80020ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_OUT_Pin */
  GPIO_InitStruct.Pin = DIR_OUT_Pin;
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0052      	lsls	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIR_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	187a      	adds	r2, r7, r1
 8000ef4:	2390      	movs	r3, #144	; 0x90
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 f8d6 	bl	80020ac <HAL_GPIO_Init>

}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b009      	add	sp, #36	; 0x24
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	10310000 	.word	0x10310000

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	0002      	movs	r2, r0
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <ssd1306_WriteCommand+0x30>)
 8000f36:	2301      	movs	r3, #1
 8000f38:	425b      	negs	r3, r3
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2200      	movs	r2, #0
 8000f48:	2178      	movs	r1, #120	; 0x78
 8000f4a:	f001 fb0d 	bl	8002568 <HAL_I2C_Mem_Write>
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	200002cc 	.word	0x200002cc

08000f5c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <ssd1306_WriteData+0x30>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4252      	negs	r2, r2
 8000f70:	9202      	str	r2, [sp, #8]
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	2178      	movs	r1, #120	; 0x78
 8000f7e:	f001 faf3 	bl	8002568 <HAL_I2C_Mem_Write>
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	200002cc 	.word	0x200002cc

08000f90 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f94:	f7ff ffc3 	bl	8000f1e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f98:	2064      	movs	r0, #100	; 0x64
 8000f9a:	f000 fe3b 	bl	8001c14 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 fa18 	bl	80013d4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000fa4:	2020      	movs	r0, #32
 8000fa6:	f7ff ffbf 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ffbc 	bl	8000f28 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fb0:	20b0      	movs	r0, #176	; 0xb0
 8000fb2:	f7ff ffb9 	bl	8000f28 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000fb6:	20c8      	movs	r0, #200	; 0xc8
 8000fb8:	f7ff ffb6 	bl	8000f28 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff ffb3 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000fc2:	2010      	movs	r0, #16
 8000fc4:	f7ff ffb0 	bl	8000f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000fc8:	2040      	movs	r0, #64	; 0x40
 8000fca:	f7ff ffad 	bl	8000f28 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	f000 f9e8 	bl	80013a4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000fd4:	20a1      	movs	r0, #161	; 0xa1
 8000fd6:	f7ff ffa7 	bl	8000f28 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000fda:	20a6      	movs	r0, #166	; 0xa6
 8000fdc:	f7ff ffa4 	bl	8000f28 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000fe0:	20a8      	movs	r0, #168	; 0xa8
 8000fe2:	f7ff ffa1 	bl	8000f28 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000fe6:	201f      	movs	r0, #31
 8000fe8:	f7ff ff9e 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fec:	20a4      	movs	r0, #164	; 0xa4
 8000fee:	f7ff ff9b 	bl	8000f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000ff2:	20d3      	movs	r0, #211	; 0xd3
 8000ff4:	f7ff ff98 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ff95 	bl	8000f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ffe:	20d5      	movs	r0, #213	; 0xd5
 8001000:	f7ff ff92 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001004:	20f0      	movs	r0, #240	; 0xf0
 8001006:	f7ff ff8f 	bl	8000f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800100a:	20d9      	movs	r0, #217	; 0xd9
 800100c:	f7ff ff8c 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001010:	2022      	movs	r0, #34	; 0x22
 8001012:	f7ff ff89 	bl	8000f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001016:	20da      	movs	r0, #218	; 0xda
 8001018:	f7ff ff86 	bl	8000f28 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800101c:	2002      	movs	r0, #2
 800101e:	f7ff ff83 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001022:	20db      	movs	r0, #219	; 0xdb
 8001024:	f7ff ff80 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ff7d 	bl	8000f28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800102e:	208d      	movs	r0, #141	; 0x8d
 8001030:	f7ff ff7a 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001034:	2014      	movs	r0, #20
 8001036:	f7ff ff77 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800103a:	2001      	movs	r0, #1
 800103c:	f000 f9ca 	bl	80013d4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f811 	bl	8001068 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001046:	f000 f833 	bl	80010b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <ssd1306_Init+0xd4>)
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <ssd1306_Init+0xd4>)
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001056:	4b03      	ldr	r3, [pc, #12]	; (8001064 <ssd1306_Init+0xd4>)
 8001058:	2201      	movs	r2, #1
 800105a:	715a      	strb	r2, [r3, #5]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	200002b4 	.word	0x200002b4

08001068 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	0002      	movs	r2, r0
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e00e      	b.n	8001098 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <ssd1306_Fill+0x1e>
 8001082:	2100      	movs	r1, #0
 8001084:	e000      	b.n	8001088 <ssd1306_Fill+0x20>
 8001086:	21ff      	movs	r1, #255	; 0xff
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <ssd1306_Fill+0x40>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	1c0a      	adds	r2, r1, #0
 8001090:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <ssd1306_Fill+0x44>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d9ec      	bls.n	800107a <ssd1306_Fill+0x12>
    }
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b004      	add	sp, #16
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000b4 	.word	0x200000b4
 80010ac:	000001ff 	.word	0x000001ff

080010b0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e01a      	b.n	80010f4 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3b50      	subs	r3, #80	; 0x50
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff ff2e 	bl	8000f28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff ff2b 	bl	8000f28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80010d2:	2010      	movs	r0, #16
 80010d4:	f7ff ff28 	bl	8000f28 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	01da      	lsls	r2, r3, #7
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <ssd1306_UpdateScreen+0x54>)
 80010e0:	18d3      	adds	r3, r2, r3
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff39 	bl	8000f5c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	3201      	adds	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d9e0      	bls.n	80010be <ssd1306_UpdateScreen+0xe>
    }
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000b4 	.word	0x200000b4

08001108 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	0004      	movs	r4, r0
 8001110:	0008      	movs	r0, r1
 8001112:	0011      	movs	r1, r2
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	1c22      	adds	r2, r4, #0
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	1dbb      	adds	r3, r7, #6
 800111c:	1c02      	adds	r2, r0, #0
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	1d7b      	adds	r3, r7, #5
 8001122:	1c0a      	adds	r2, r1, #0
 8001124:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	db52      	blt.n	80011d6 <ssd1306_DrawPixel+0xce>
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b1f      	cmp	r3, #31
 8001136:	d84e      	bhi.n	80011d6 <ssd1306_DrawPixel+0xce>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <ssd1306_DrawPixel+0xd8>)
 800113a:	791b      	ldrb	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <ssd1306_DrawPixel+0x46>
        color = (SSD1306_COLOR)!color;
 8001140:	1d7b      	adds	r3, r7, #5
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	425a      	negs	r2, r3
 8001146:	4153      	adcs	r3, r2
 8001148:	b2da      	uxtb	r2, r3
 800114a:	1d7b      	adds	r3, r7, #5
 800114c:	701a      	strb	r2, [r3, #0]
    }
    
    // Draw in the right color
    if(color == White) {
 800114e:	1d7b      	adds	r3, r7, #5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d11e      	bne.n	8001194 <ssd1306_DrawPixel+0x8c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	08db      	lsrs	r3, r3, #3
 8001160:	b2d8      	uxtb	r0, r3
 8001162:	0003      	movs	r3, r0
 8001164:	01db      	lsls	r3, r3, #7
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <ssd1306_DrawPixel+0xdc>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	b25a      	sxtb	r2, r3
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2107      	movs	r1, #7
 8001174:	400b      	ands	r3, r1
 8001176:	2101      	movs	r1, #1
 8001178:	4099      	lsls	r1, r3
 800117a:	000b      	movs	r3, r1
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b259      	sxtb	r1, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	0003      	movs	r3, r0
 8001188:	01db      	lsls	r3, r3, #7
 800118a:	18d3      	adds	r3, r2, r3
 800118c:	b2c9      	uxtb	r1, r1
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <ssd1306_DrawPixel+0xdc>)
 8001190:	54d1      	strb	r1, [r2, r3]
 8001192:	e021      	b.n	80011d8 <ssd1306_DrawPixel+0xd0>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	b2d8      	uxtb	r0, r3
 80011a0:	0003      	movs	r3, r0
 80011a2:	01db      	lsls	r3, r3, #7
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <ssd1306_DrawPixel+0xdc>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	1dba      	adds	r2, r7, #6
 80011ae:	7812      	ldrb	r2, [r2, #0]
 80011b0:	2107      	movs	r1, #7
 80011b2:	400a      	ands	r2, r1
 80011b4:	2101      	movs	r1, #1
 80011b6:	4091      	lsls	r1, r2
 80011b8:	000a      	movs	r2, r1
 80011ba:	b252      	sxtb	r2, r2
 80011bc:	43d2      	mvns	r2, r2
 80011be:	b252      	sxtb	r2, r2
 80011c0:	4013      	ands	r3, r2
 80011c2:	b259      	sxtb	r1, r3
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	0003      	movs	r3, r0
 80011ca:	01db      	lsls	r3, r3, #7
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	b2c9      	uxtb	r1, r1
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <ssd1306_DrawPixel+0xdc>)
 80011d2:	54d1      	strb	r1, [r2, r3]
 80011d4:	e000      	b.n	80011d8 <ssd1306_DrawPixel+0xd0>
        return;
 80011d6:	46c0      	nop			; (mov r8, r8)
    }
}
 80011d8:	46bd      	mov	sp, r7
 80011da:	b003      	add	sp, #12
 80011dc:	bd90      	pop	{r4, r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	200002b4 	.word	0x200002b4
 80011e4:	200000b4 	.word	0x200000b4

080011e8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	0004      	movs	r4, r0
 80011f0:	1d38      	adds	r0, r7, #4
 80011f2:	6001      	str	r1, [r0, #0]
 80011f4:	6042      	str	r2, [r0, #4]
 80011f6:	0019      	movs	r1, r3
 80011f8:	200f      	movs	r0, #15
 80011fa:	183b      	adds	r3, r7, r0
 80011fc:	1c22      	adds	r2, r4, #0
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	230e      	movs	r3, #14
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	1c0a      	adds	r2, r1, #0
 8001206:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001208:	183b      	adds	r3, r7, r0
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b1f      	cmp	r3, #31
 800120e:	d904      	bls.n	800121a <ssd1306_WriteChar+0x32>
 8001210:	230f      	movs	r3, #15
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b7e      	cmp	r3, #126	; 0x7e
 8001218:	d901      	bls.n	800121e <ssd1306_WriteChar+0x36>
        return 0;
 800121a:	2300      	movs	r3, #0
 800121c:	e078      	b.n	8001310 <ssd1306_WriteChar+0x128>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <ssd1306_WriteChar+0x130>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	001a      	movs	r2, r3
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	18d3      	adds	r3, r2, r3
 800122a:	2b80      	cmp	r3, #128	; 0x80
 800122c:	dc07      	bgt.n	800123e <ssd1306_WriteChar+0x56>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <ssd1306_WriteChar+0x130>)
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	001a      	movs	r2, r3
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800123a:	2b20      	cmp	r3, #32
 800123c:	dd01      	ble.n	8001242 <ssd1306_WriteChar+0x5a>
    {
        // Not enough space on current line
        return 0;
 800123e:	2300      	movs	r3, #0
 8001240:	e066      	b.n	8001310 <ssd1306_WriteChar+0x128>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	e051      	b.n	80012ec <ssd1306_WriteChar+0x104>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	230f      	movs	r3, #15
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3b20      	subs	r3, #32
 8001254:	1d39      	adds	r1, r7, #4
 8001256:	7849      	ldrb	r1, [r1, #1]
 8001258:	434b      	muls	r3, r1
 800125a:	0019      	movs	r1, r3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	18cb      	adds	r3, r1, r3
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	18d3      	adds	r3, r2, r3
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	e035      	b.n	80012da <ssd1306_WriteChar+0xf2>
            if((b << j) & 0x8000)  {
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	409a      	lsls	r2, r3
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	4013      	ands	r3, r2
 800127a:	d014      	beq.n	80012a6 <ssd1306_WriteChar+0xbe>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <ssd1306_WriteChar+0x130>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	18d3      	adds	r3, r2, r3
 8001288:	b2d8      	uxtb	r0, r3
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <ssd1306_WriteChar+0x130>)
 800128c:	885b      	ldrh	r3, [r3, #2]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	b2d9      	uxtb	r1, r3
 8001298:	230e      	movs	r3, #14
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	001a      	movs	r2, r3
 80012a0:	f7ff ff32 	bl	8001108 <ssd1306_DrawPixel>
 80012a4:	e016      	b.n	80012d4 <ssd1306_WriteChar+0xec>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <ssd1306_WriteChar+0x130>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <ssd1306_WriteChar+0x130>)
 80012b6:	885b      	ldrh	r3, [r3, #2]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	18d3      	adds	r3, r2, r3
 80012c0:	b2d9      	uxtb	r1, r3
 80012c2:	230e      	movs	r3, #14
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	425a      	negs	r2, r3
 80012ca:	4153      	adcs	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	001a      	movs	r2, r3
 80012d0:	f7ff ff1a 	bl	8001108 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	3301      	adds	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	001a      	movs	r2, r3
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d3c3      	bcc.n	800126e <ssd1306_WriteChar+0x86>
    for(i = 0; i < Font.FontHeight; i++) {
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	001a      	movs	r2, r3
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d3a7      	bcc.n	8001248 <ssd1306_WriteChar+0x60>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <ssd1306_WriteChar+0x130>)
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	18d3      	adds	r3, r2, r3
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <ssd1306_WriteChar+0x130>)
 8001308:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800130a:	230f      	movs	r3, #15
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	781b      	ldrb	r3, [r3, #0]
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b009      	add	sp, #36	; 0x24
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	200002b4 	.word	0x200002b4

0800131c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	1d38      	adds	r0, r7, #4
 8001326:	6001      	str	r1, [r0, #0]
 8001328:	6042      	str	r2, [r0, #4]
 800132a:	001a      	movs	r2, r3
 800132c:	1cfb      	adds	r3, r7, #3
 800132e:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8001330:	e014      	b.n	800135c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	7818      	ldrb	r0, [r3, #0]
 8001336:	1cfb      	adds	r3, r7, #3
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	1d3a      	adds	r2, r7, #4
 800133c:	6811      	ldr	r1, [r2, #0]
 800133e:	6852      	ldr	r2, [r2, #4]
 8001340:	f7ff ff52 	bl	80011e8 <ssd1306_WriteChar>
 8001344:	0003      	movs	r3, r0
 8001346:	001a      	movs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d002      	beq.n	8001356 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	e008      	b.n	8001368 <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e6      	bne.n	8001332 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	781b      	ldrb	r3, [r3, #0]
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bd80      	pop	{r7, pc}

08001370 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	0002      	movs	r2, r0
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	1dbb      	adds	r3, r7, #6
 800137e:	1c0a      	adds	r2, r1, #0
 8001380:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <ssd1306_SetCursor+0x30>)
 800138a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800138c:	1dbb      	adds	r3, r7, #6
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <ssd1306_SetCursor+0x30>)
 8001394:	805a      	strh	r2, [r3, #2]
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	200002b4 	.word	0x200002b4

080013a4 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80013b0:	210f      	movs	r1, #15
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2281      	movs	r2, #129	; 0x81
 80013b6:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff fdb3 	bl	8000f28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff fdae 	bl	8000f28 <ssd1306_WriteCommand>
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b004      	add	sp, #16
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	0002      	movs	r2, r0
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80013e0:	1dfb      	adds	r3, r7, #7
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	22af      	movs	r2, #175	; 0xaf
 80013ee:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <ssd1306_SetDisplayOn+0x48>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	719a      	strb	r2, [r3, #6]
 80013f6:	e006      	b.n	8001406 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	22ae      	movs	r2, #174	; 0xae
 80013fe:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <ssd1306_SetDisplayOn+0x48>)
 8001402:	2200      	movs	r2, #0
 8001404:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001406:	230f      	movs	r3, #15
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff fd8b 	bl	8000f28 <ssd1306_WriteCommand>
}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	b004      	add	sp, #16
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	200002b4 	.word	0x200002b4

08001420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_MspInit+0x44>)
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_MspInit+0x44>)
 800142c:	2101      	movs	r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_MspInit+0x44>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2201      	movs	r2, #1
 8001438:	4013      	ands	r3, r2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x44>)
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_MspInit+0x44>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0549      	lsls	r1, r1, #21
 8001448:	430a      	orrs	r2, r1
 800144a:	61da      	str	r2, [r3, #28]
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_MspInit+0x44>)
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	055b      	lsls	r3, r3, #21
 8001454:	4013      	ands	r3, r2
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	2314      	movs	r3, #20
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	0018      	movs	r0, r3
 8001476:	2314      	movs	r3, #20
 8001478:	001a      	movs	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	f004 fa3b 	bl	80058f6 <memset>
  if(hi2c->Instance==I2C1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_I2C_MspInit+0x90>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d131      	bne.n	80014ee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_I2C_MspInit+0x94>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_I2C_MspInit+0x94>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	02c9      	lsls	r1, r1, #11
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_I2C_MspInit+0x94>)
 800149a:	695a      	ldr	r2, [r3, #20]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	02db      	lsls	r3, r3, #11
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a6:	2114      	movs	r1, #20
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	22c0      	movs	r2, #192	; 0xc0
 80014ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	2212      	movs	r2, #18
 80014b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	2201      	movs	r2, #1
 80014b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2203      	movs	r2, #3
 80014be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	2201      	movs	r2, #1
 80014c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_I2C_MspInit+0x98>)
 80014ca:	0019      	movs	r1, r3
 80014cc:	0010      	movs	r0, r2
 80014ce:	f000 fded 	bl	80020ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_I2C_MspInit+0x94>)
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_I2C_MspInit+0x94>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	0389      	lsls	r1, r1, #14
 80014dc:	430a      	orrs	r2, r1
 80014de:	61da      	str	r2, [r3, #28]
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_I2C_MspInit+0x94>)
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b00a      	add	sp, #40	; 0x28
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40005400 	.word	0x40005400
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000400 	.word	0x48000400

08001504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	2324      	movs	r3, #36	; 0x24
 800150e:	18fb      	adds	r3, r7, r3
 8001510:	0018      	movs	r0, r3
 8001512:	2314      	movs	r3, #20
 8001514:	001a      	movs	r2, r3
 8001516:	2100      	movs	r1, #0
 8001518:	f004 f9ed 	bl	80058f6 <memset>
  if(htim_base->Instance==TIM1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6b      	ldr	r2, [pc, #428]	; (80016d0 <HAL_TIM_Base_MspInit+0x1cc>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d15d      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001526:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	0109      	lsls	r1, r1, #4
 8001530:	430a      	orrs	r2, r1
 8001532:	619a      	str	r2, [r3, #24]
 8001534:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4013      	ands	r3, r2
 800153e:	623b      	str	r3, [r7, #32]
 8001540:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0289      	lsls	r1, r1, #10
 800154c:	430a      	orrs	r2, r1
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	029b      	lsls	r3, r3, #10
 8001558:	4013      	ands	r3, r2
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_IN_PWM_Pin;
 800155e:	2124      	movs	r1, #36	; 0x24
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2202      	movs	r2, #2
 800156c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2202      	movs	r2, #2
 800157e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(STEP_IN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001580:	187a      	adds	r2, r7, r1
 8001582:	2390      	movs	r3, #144	; 0x90
 8001584:	05db      	lsls	r3, r3, #23
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f000 fd8f 	bl	80020ac <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 800158e:	4b52      	ldr	r3, [pc, #328]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_TIM_Base_MspInit+0x1d8>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800159a:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015a0:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015ae:	4b4a      	ldr	r3, [pc, #296]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015b0:	2280      	movs	r2, #128	; 0x80
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 80015b6:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	0152      	lsls	r2, r2, #5
 80015c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80015c4:	4b44      	ldr	r3, [pc, #272]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 fc24 	bl	8001e14 <HAL_DMA_Init>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 80015d0:	f7ff fca0 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a40      	ldr	r2, [pc, #256]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_TIM_Base_MspInit+0x1d4>)
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015e0:	e071      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x1c2>
  else if(htim_base->Instance==TIM3)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <HAL_TIM_Base_MspInit+0x1dc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d131      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 80015ee:	69da      	ldr	r2, [r3, #28]
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 80015f2:	2102      	movs	r1, #2
 80015f4:	430a      	orrs	r2, r1
 80015f6:	61da      	str	r2, [r3, #28]
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0289      	lsls	r1, r1, #10
 800160e:	430a      	orrs	r2, r1
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	029b      	lsls	r3, r3, #10
 800161a:	4013      	ands	r3, r2
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_IN_Pin;
 8001620:	2124      	movs	r1, #36	; 0x24
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2240      	movs	r2, #64	; 0x40
 8001626:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2202      	movs	r2, #2
 800162c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2201      	movs	r2, #1
 800163e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(STEP_IN_GPIO_Port, &GPIO_InitStruct);
 8001640:	187a      	adds	r2, r7, r1
 8001642:	2390      	movs	r3, #144	; 0x90
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	0011      	movs	r1, r2
 8001648:	0018      	movs	r0, r3
 800164a:	f000 fd2f 	bl	80020ac <HAL_GPIO_Init>
}
 800164e:	e03a      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x1c2>
  else if(htim_base->Instance==TIM14)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <HAL_TIM_Base_MspInit+0x1e0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d10e      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x174>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 800165c:	69da      	ldr	r2, [r3, #28]
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	0049      	lsls	r1, r1, #1
 8001664:	430a      	orrs	r2, r1
 8001666:	61da      	str	r2, [r3, #28]
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
}
 8001676:	e026      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x1c2>
  else if(htim_base->Instance==TIM16)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_TIM_Base_MspInit+0x1e4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10e      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x19c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0289      	lsls	r1, r1, #10
 800168c:	430a      	orrs	r2, r1
 800168e:	619a      	str	r2, [r3, #24]
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	029b      	lsls	r3, r3, #10
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	e012      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x1c2>
  else if(htim_base->Instance==TIM17)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_TIM_Base_MspInit+0x1e8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10d      	bne.n	80016c6 <HAL_TIM_Base_MspInit+0x1c2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	02c9      	lsls	r1, r1, #11
 80016b4:	430a      	orrs	r2, r1
 80016b6:	619a      	str	r2, [r3, #24]
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_TIM_Base_MspInit+0x1d0>)
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	02db      	lsls	r3, r3, #11
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b00e      	add	sp, #56	; 0x38
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40012c00 	.word	0x40012c00
 80016d4:	40021000 	.word	0x40021000
 80016d8:	2000035c 	.word	0x2000035c
 80016dc:	40020030 	.word	0x40020030
 80016e0:	40000400 	.word	0x40000400
 80016e4:	40002000 	.word	0x40002000
 80016e8:	40014400 	.word	0x40014400
 80016ec:	40014800 	.word	0x40014800

080016f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	2314      	movs	r3, #20
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	0018      	movs	r0, r3
 80016fe:	2314      	movs	r3, #20
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f004 f8f7 	bl	80058f6 <memset>
  if(htim_encoder->Instance==TIM2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	05db      	lsls	r3, r3, #23
 8001710:	429a      	cmp	r2, r3
 8001712:	d161      	bne.n	80017d8 <HAL_TIM_Encoder_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800171a:	2101      	movs	r1, #1
 800171c:	430a      	orrs	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2201      	movs	r2, #1
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0289      	lsls	r1, r1, #10
 8001736:	430a      	orrs	r2, r1
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8001748:	2114      	movs	r1, #20
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2203      	movs	r2, #3
 800174e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2202      	movs	r2, #2
 8001754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2202      	movs	r2, #2
 8001766:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	187a      	adds	r2, r7, r1
 800176a:	2390      	movs	r3, #144	; 0x90
 800176c:	05db      	lsls	r3, r3, #23
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f000 fc9b 	bl	80020ac <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800177a:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017a6:	22c0      	movs	r2, #192	; 0xc0
 80017a8:	0192      	lsls	r2, r2, #6
 80017aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fb30 	bl	8001e14 <HAL_DMA_Init>
 80017b4:	1e03      	subs	r3, r0, #0
 80017b6:	d001      	beq.n	80017bc <HAL_TIM_Encoder_MspInit+0xcc>
    {
      Error_Handler();
 80017b8:	f7ff fbac 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017c0:	621a      	str	r2, [r3, #32]
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	200f      	movs	r0, #15
 80017ce:	f000 faef 	bl	8001db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017d2:	200f      	movs	r0, #15
 80017d4:	f000 fb01 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b00a      	add	sp, #40	; 0x28
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	20000318 	.word	0x20000318
 80017e8:	4002001c 	.word	0x4002001c

080017ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	230c      	movs	r3, #12
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	0018      	movs	r0, r3
 80017fa:	2314      	movs	r3, #20
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f004 f879 	bl	80058f6 <memset>
  if(htim->Instance==TIM14)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a15      	ldr	r2, [pc, #84]	; (8001860 <HAL_TIM_MspPostInit+0x74>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d124      	bne.n	8001858 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_TIM_MspPostInit+0x78>)
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_TIM_MspPostInit+0x78>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0289      	lsls	r1, r1, #10
 8001818:	430a      	orrs	r2, r1
 800181a:	615a      	str	r2, [r3, #20]
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_TIM_MspPostInit+0x78>)
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = STEP_OUT_Pin;
 800182a:	210c      	movs	r1, #12
 800182c:	187b      	adds	r3, r7, r1
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2202      	movs	r2, #2
 8001836:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2202      	movs	r2, #2
 800183c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2201      	movs	r2, #1
 8001842:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2204      	movs	r2, #4
 8001848:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(STEP_OUT_GPIO_Port, &GPIO_InitStruct);
 800184a:	187a      	adds	r2, r7, r1
 800184c:	2390      	movs	r3, #144	; 0x90
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	0011      	movs	r1, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fc2a 	bl	80020ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b008      	add	sp, #32
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40002000 	.word	0x40002000
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	2314      	movs	r3, #20
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	0018      	movs	r0, r3
 8001876:	2314      	movs	r3, #20
 8001878:	001a      	movs	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	f004 f83b 	bl	80058f6 <memset>
  if(huart->Instance==USART1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a20      	ldr	r2, [pc, #128]	; (8001908 <HAL_UART_MspInit+0xa0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d13a      	bne.n	8001900 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_UART_MspInit+0xa4>)
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_UART_MspInit+0xa4>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	01c9      	lsls	r1, r1, #7
 8001894:	430a      	orrs	r2, r1
 8001896:	619a      	str	r2, [r3, #24]
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_UART_MspInit+0xa4>)
 800189a:	699a      	ldr	r2, [r3, #24]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	01db      	lsls	r3, r3, #7
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_UART_MspInit+0xa4>)
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_UART_MspInit+0xa4>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0289      	lsls	r1, r1, #10
 80018b0:	430a      	orrs	r2, r1
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_UART_MspInit+0xa4>)
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	029b      	lsls	r3, r3, #10
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80018c2:	2114      	movs	r1, #20
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_UART_MspInit+0xa8>)
 80018c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2202      	movs	r2, #2
 80018ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2203      	movs	r2, #3
 80018da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2201      	movs	r2, #1
 80018e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	187a      	adds	r2, r7, r1
 80018e4:	2390      	movs	r3, #144	; 0x90
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 fbde 	bl	80020ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	201b      	movs	r0, #27
 80018f6:	f000 fa5b 	bl	8001db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018fa:	201b      	movs	r0, #27
 80018fc:	f000 fa6d 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b00a      	add	sp, #40	; 0x28
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40013800 	.word	0x40013800
 800190c:	40021000 	.word	0x40021000
 8001910:	00008004 	.word	0x00008004

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 f94e 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

	if (HAL_GPIO_ReadPin(GPIOA, DIR_IN_Pin) == 1)
 800194c:	2390      	movs	r3, #144	; 0x90
 800194e:	05db      	lsls	r3, r3, #23
 8001950:	2110      	movs	r1, #16
 8001952:	0018      	movs	r0, r3
 8001954:	f000 fd12 	bl	800237c <HAL_GPIO_ReadPin>
 8001958:	0003      	movs	r3, r0
 800195a:	2b01      	cmp	r3, #1
 800195c:	d106      	bne.n	800196c <EXTI4_15_IRQHandler+0x24>
	{
		TIM3->CR1 &= 0b1111111111101111;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <EXTI4_15_IRQHandler+0x3c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <EXTI4_15_IRQHandler+0x3c>)
 8001964:	4908      	ldr	r1, [pc, #32]	; (8001988 <EXTI4_15_IRQHandler+0x40>)
 8001966:	400a      	ands	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e005      	b.n	8001978 <EXTI4_15_IRQHandler+0x30>
		//posCng = 1;
	} else {
		TIM3->CR1 |= TIM_COUNTERMODE_DOWN;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <EXTI4_15_IRQHandler+0x3c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <EXTI4_15_IRQHandler+0x3c>)
 8001972:	2110      	movs	r1, #16
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
		//posCng = -1;
	}


  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001978:	2010      	movs	r0, #16
 800197a:	f000 fd39 	bl	80023f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40000400 	.word	0x40000400
 8001988:	0000ffef 	.word	0x0000ffef

0800198c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001992:	0018      	movs	r0, r3
 8001994:	f000 facc 	bl	8001f30 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <DMA1_Channel2_3_IRQHandler+0x20>)
 800199a:	0018      	movs	r0, r3
 800199c:	f000 fac8 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000318 	.word	0x20000318
 80019ac:	2000035c 	.word	0x2000035c

080019b0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80019b6:	0018      	movs	r0, r3
 80019b8:	f002 f92b 	bl	8003c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	200004a0 	.word	0x200004a0

080019c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	flag = 1;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <TIM1_CC_IRQHandler+0x18>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <TIM1_CC_IRQHandler+0x1c>)
 80019d4:	0018      	movs	r0, r3
 80019d6:	f002 f91c 	bl	8003c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200002bc 	.word	0x200002bc
 80019e4:	200004a0 	.word	0x200004a0

080019e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (HAL_GPIO_ReadPin(GPIOA, DIR_IN_Pin) == 1)
 80019ec:	2390      	movs	r3, #144	; 0x90
 80019ee:	05db      	lsls	r3, r3, #23
 80019f0:	2110      	movs	r1, #16
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fcc2 	bl	800237c <HAL_GPIO_ReadPin>
 80019f8:	0003      	movs	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <TIM3_IRQHandler+0x22>
	{
		T3_ov_cnt++;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <TIM3_IRQHandler+0x3c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <TIM3_IRQHandler+0x3c>)
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e004      	b.n	8001a14 <TIM3_IRQHandler+0x2c>
		//setPos =+ TimerOV;
	} else {
		T3_ov_cnt--;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <TIM3_IRQHandler+0x3c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <TIM3_IRQHandler+0x3c>)
 8001a12:	601a      	str	r2, [r3, #0]
		//setPos =- TimerOV;
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <TIM3_IRQHandler+0x40>)
 8001a16:	0018      	movs	r0, r3
 8001a18:	f002 f8fb 	bl	8003c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	200000b0 	.word	0x200000b0
 8001a28:	200003e0 	.word	0x200003e0

08001a2c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	//printData_LCD(encPos, setPos); //print calculated values for Linear Encoder
	printData_LCD_rotary(rotaryCNT, setPos); //print values for Rotary Encoder
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <TIM16_IRQHandler+0x38>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <TIM16_IRQHandler+0x3c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0019      	movs	r1, r3
 8001a3a:	0010      	movs	r0, r2
 8001a3c:	f7fe fd6a 	bl	8000514 <printData_LCD_rotary>

	//printData_LCD(encPos, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1)); //print to the LCD read PWM freq instead

	print_RAW(TIM2->CNT);
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7fe fdbc 	bl	80005c4 <print_RAW>
	print_RAW(encPos);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <TIM16_IRQHandler+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7fe fdb7 	bl	80005c4 <print_RAW>
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <TIM16_IRQHandler+0x44>)
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f002 f8da 	bl	8003c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000094 	.word	0x20000094
 8001a68:	200000a0 	.word	0x200000a0
 8001a6c:	20000098 	.word	0x20000098
 8001a70:	20000578 	.word	0x20000578

08001a74 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <TIM17_IRQHandler+0x14>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f002 f8c9 	bl	8003c12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	200003a0 	.word	0x200003a0

08001a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <USART1_IRQHandler+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f003 fa70 	bl	8004f78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	20000420 	.word	0x20000420

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <_sbrk+0x38>)
 8001aaa:	490d      	ldr	r1, [pc, #52]	; (8001ae0 <_sbrk+0x3c>)
 8001aac:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <_sbrk+0x40>)
 8001ab0:	6809      	ldr	r1, [r1, #0]
 8001ab2:	2900      	cmp	r1, #0
 8001ab4:	d007      	beq.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	490b      	ldr	r1, [pc, #44]	; (8001ae4 <_sbrk+0x40>)
 8001ab8:	6808      	ldr	r0, [r1, #0]
 8001aba:	18c3      	adds	r3, r0, r3
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d806      	bhi.n	8001ace <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ac0:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <_sbrk+0x40>)
 8001ac2:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001ac4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ac6:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <_sbrk+0x40>)
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <_sbrk+0x44>)
 8001aca:	6008      	str	r0, [r1, #0]
 8001acc:	e7f3      	b.n	8001ab6 <_sbrk+0x12>
    errno = ENOMEM;
 8001ace:	f003 fedf 	bl	8005890 <__errno>
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	4240      	negs	r0, r0
 8001ada:	e7f3      	b.n	8001ac4 <_sbrk+0x20>
 8001adc:	20001000 	.word	0x20001000
 8001ae0:	00000400 	.word	0x00000400
 8001ae4:	200002c0 	.word	0x200002c0
 8001ae8:	200005c0 	.word	0x200005c0

08001aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001afa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001afe:	490e      	ldr	r1, [pc, #56]	; (8001b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <LoopForever+0xe>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b14:	4c0b      	ldr	r4, [pc, #44]	; (8001b44 <LoopForever+0x16>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b22:	f7ff ffe3 	bl	8001aec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b26:	f003 feb9 	bl	800589c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b2a:	f7fe fd67 	bl	80005fc <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   r0, =_estack
 8001b30:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b3c:	08006958 	.word	0x08006958
  ldr r2, =_sbss
 8001b40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b44:	200005c0 	.word	0x200005c0

08001b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_IRQHandler>
	...

08001b4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_Init+0x24>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_Init+0x24>)
 8001b56:	2110      	movs	r1, #16
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 f809 	bl	8001b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b62:	f7ff fc5d 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40022000 	.word	0x40022000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_InitTick+0x5c>)
 8001b7e:	681c      	ldr	r4, [r3, #0]
 8001b80:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_InitTick+0x60>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	0019      	movs	r1, r3
 8001b86:	23fa      	movs	r3, #250	; 0xfa
 8001b88:	0098      	lsls	r0, r3, #2
 8001b8a:	f7fe fac5 	bl	8000118 <__udivsi3>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	0019      	movs	r1, r3
 8001b92:	0020      	movs	r0, r4
 8001b94:	f7fe fac0 	bl	8000118 <__udivsi3>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 f92d 	bl	8001dfa <HAL_SYSTICK_Config>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e00f      	b.n	8001bc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d80b      	bhi.n	8001bc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f8fa 	bl	8001db0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_InitTick+0x64>)
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b003      	add	sp, #12
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000010 	.word	0x20000010
 8001bd8:	2000000c 	.word	0x2000000c

08001bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	001a      	movs	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x20>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	18d2      	adds	r2, r2, r3
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_IncTick+0x20>)
 8001bee:	601a      	str	r2, [r3, #0]
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	200005b8 	.word	0x200005b8

08001c00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GetTick+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	200005b8 	.word	0x200005b8

08001c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff fff0 	bl	8001c00 <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	d005      	beq.n	8001c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_Delay+0x40>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	001a      	movs	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	189b      	adds	r3, r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	f7ff ffe0 	bl	8001c00 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d8f7      	bhi.n	8001c3c <HAL_Delay+0x28>
  {
  }
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000010 	.word	0x20000010

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	1dfb      	adds	r3, r7, #7
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b7f      	cmp	r3, #127	; 0x7f
 8001c6a:	d809      	bhi.n	8001c80 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	001a      	movs	r2, r3
 8001c72:	231f      	movs	r3, #31
 8001c74:	401a      	ands	r2, r3
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_EnableIRQ+0x30>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4091      	lsls	r1, r2
 8001c7c:	000a      	movs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
  }
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	0002      	movs	r2, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca0:	d828      	bhi.n	8001cf4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <__NVIC_SetPriority+0xd4>)
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	33c0      	adds	r3, #192	; 0xc0
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	589b      	ldr	r3, [r3, r2]
 8001cb2:	1dfa      	adds	r2, r7, #7
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	2203      	movs	r2, #3
 8001cba:	400a      	ands	r2, r1
 8001cbc:	00d2      	lsls	r2, r2, #3
 8001cbe:	21ff      	movs	r1, #255	; 0xff
 8001cc0:	4091      	lsls	r1, r2
 8001cc2:	000a      	movs	r2, r1
 8001cc4:	43d2      	mvns	r2, r2
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	2303      	movs	r3, #3
 8001cda:	4003      	ands	r3, r0
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce0:	481f      	ldr	r0, [pc, #124]	; (8001d60 <__NVIC_SetPriority+0xd4>)
 8001ce2:	1dfb      	adds	r3, r7, #7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	430a      	orrs	r2, r1
 8001cec:	33c0      	adds	r3, #192	; 0xc0
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cf2:	e031      	b.n	8001d58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <__NVIC_SetPriority+0xd8>)
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	400b      	ands	r3, r1
 8001d00:	3b08      	subs	r3, #8
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3306      	adds	r3, #6
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	18d3      	adds	r3, r2, r3
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	1dfa      	adds	r2, r7, #7
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	0011      	movs	r1, r2
 8001d14:	2203      	movs	r2, #3
 8001d16:	400a      	ands	r2, r1
 8001d18:	00d2      	lsls	r2, r2, #3
 8001d1a:	21ff      	movs	r1, #255	; 0xff
 8001d1c:	4091      	lsls	r1, r2
 8001d1e:	000a      	movs	r2, r1
 8001d20:	43d2      	mvns	r2, r2
 8001d22:	401a      	ands	r2, r3
 8001d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	22ff      	movs	r2, #255	; 0xff
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	2303      	movs	r3, #3
 8001d36:	4003      	ands	r3, r0
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <__NVIC_SetPriority+0xd8>)
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	001c      	movs	r4, r3
 8001d44:	230f      	movs	r3, #15
 8001d46:	4023      	ands	r3, r4
 8001d48:	3b08      	subs	r3, #8
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	3306      	adds	r3, #6
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	18c3      	adds	r3, r0, r3
 8001d54:	3304      	adds	r3, #4
 8001d56:	601a      	str	r2, [r3, #0]
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b003      	add	sp, #12
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <SysTick_Config+0x40>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e010      	b.n	8001da0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <SysTick_Config+0x44>)
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	3a01      	subs	r2, #1
 8001d84:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	2301      	movs	r3, #1
 8001d88:	425b      	negs	r3, r3
 8001d8a:	2103      	movs	r1, #3
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff ff7d 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <SysTick_Config+0x44>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x44>)
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	00ffffff 	.word	0x00ffffff
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	210f      	movs	r1, #15
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	1c02      	adds	r2, r0, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff ff5d 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b004      	add	sp, #16
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	0002      	movs	r2, r0
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff ff33 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff ffaf 	bl	8001d68 <SysTick_Config>
 8001e0a:	0003      	movs	r3, r0
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e036      	b.n	8001e98 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2221      	movs	r2, #33	; 0x21
 8001e2e:	2102      	movs	r1, #2
 8001e30:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a18      	ldr	r2, [pc, #96]	; (8001ea0 <HAL_DMA_Init+0x8c>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 f8fa 	bl	8002074 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2221      	movs	r2, #33	; 0x21
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}  
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	ffffc00f 	.word	0xffffc00f

08001ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2221      	movs	r2, #33	; 0x21
 8001eb8:	5c9b      	ldrb	r3, [r3, r2]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d007      	beq.n	8001ed0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e028      	b.n	8001f22 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	210e      	movs	r1, #14
 8001edc:	438a      	bics	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4091      	lsls	r1, r2
 8001efc:	000a      	movs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2221      	movs	r2, #33	; 0x21
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	0010      	movs	r0, r2
 8001f20:	4798      	blx	r3
    } 
  }
  return status;
 8001f22:	230f      	movs	r3, #15
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	781b      	ldrb	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	0013      	movs	r3, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	d024      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x72>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d020      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2220      	movs	r2, #32
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d107      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2104      	movs	r1, #4
 8001f78:	438a      	bics	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	2104      	movs	r1, #4
 8001f86:	4091      	lsls	r1, r2
 8001f88:	000a      	movs	r2, r1
 8001f8a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d100      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x66>
 8001f94:	e06a      	b.n	800206c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	0010      	movs	r0, r2
 8001f9e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	e064      	b.n	800206c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	0013      	movs	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d02b      	beq.n	800200a <HAL_DMA_IRQHandler+0xda>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d027      	beq.n	800200a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d10b      	bne.n	8001fde <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	438a      	bics	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2221      	movs	r2, #33	; 0x21
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4091      	lsls	r1, r2
 8001fea:	000a      	movs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d036      	beq.n	800206c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	0010      	movs	r0, r2
 8002006:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002008:	e030      	b.n	800206c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2208      	movs	r2, #8
 8002010:	409a      	lsls	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4013      	ands	r3, r2
 8002018:	d028      	beq.n	800206c <HAL_DMA_IRQHandler+0x13c>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2208      	movs	r2, #8
 800201e:	4013      	ands	r3, r2
 8002020:	d024      	beq.n	800206c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	210e      	movs	r1, #14
 800202e:	438a      	bics	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	2101      	movs	r1, #1
 800203c:	4091      	lsls	r1, r2
 800203e:	000a      	movs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2221      	movs	r2, #33	; 0x21
 800204c:	2101      	movs	r1, #1
 800204e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	2100      	movs	r1, #0
 8002056:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	0010      	movs	r0, r2
 8002068:	4798      	blx	r3
    }
   }
}  
 800206a:	e7ff      	b.n	800206c <HAL_DMA_IRQHandler+0x13c>
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b004      	add	sp, #16
 8002072:	bd80      	pop	{r7, pc}

08002074 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <DMA_CalcBaseAndBitshift+0x30>)
 8002082:	4694      	mov	ip, r2
 8002084:	4463      	add	r3, ip
 8002086:	2114      	movs	r1, #20
 8002088:	0018      	movs	r0, r3
 800208a:	f7fe f845 	bl	8000118 <__udivsi3>
 800208e:	0003      	movs	r3, r0
 8002090:	009a      	lsls	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <DMA_CalcBaseAndBitshift+0x34>)
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	bffdfff8 	.word	0xbffdfff8
 80020a8:	40020000 	.word	0x40020000

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	e149      	b.n	8002350 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2101      	movs	r1, #1
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4091      	lsls	r1, r2
 80020c6:	000a      	movs	r2, r1
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d100      	bne.n	80020d4 <HAL_GPIO_Init+0x28>
 80020d2:	e13a      	b.n	800234a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x38>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	58d3      	ldr	r3, [r2, r3]
 80020f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2207      	movs	r2, #7
 80020f6:	4013      	ands	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	409a      	lsls	r2, r3
 80020fe:	0013      	movs	r3, r2
 8002100:	43da      	mvns	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2107      	movs	r1, #7
 8002110:	400b      	ands	r3, r1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	409a      	lsls	r2, r3
 8002116:	0013      	movs	r3, r2
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	0092      	lsls	r2, r2, #2
 8002128:	6939      	ldr	r1, [r7, #16]
 800212a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	409a      	lsls	r2, r3
 800213a:	0013      	movs	r3, r2
 800213c:	43da      	mvns	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2203      	movs	r2, #3
 800214a:	401a      	ands	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	409a      	lsls	r2, r3
 8002152:	0013      	movs	r3, r2
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d00b      	beq.n	8002180 <HAL_GPIO_Init+0xd4>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d007      	beq.n	8002180 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002174:	2b11      	cmp	r3, #17
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d130      	bne.n	80021e2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	409a      	lsls	r2, r3
 800218e:	0013      	movs	r3, r2
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b6:	2201      	movs	r2, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	2201      	movs	r2, #1
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	43da      	mvns	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	055b      	lsls	r3, r3, #21
 800221a:	4013      	ands	r3, r2
 800221c:	d100      	bne.n	8002220 <HAL_GPIO_Init+0x174>
 800221e:	e094      	b.n	800234a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002220:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 8002226:	2101      	movs	r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	619a      	str	r2, [r3, #24]
 800222c:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <HAL_GPIO_Init+0x2bc>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_GPIO_Init+0x2c0>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	589b      	ldr	r3, [r3, r2]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2203      	movs	r2, #3
 800224a:	4013      	ands	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	409a      	lsls	r2, r3
 8002252:	0013      	movs	r3, r2
 8002254:	43da      	mvns	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	2390      	movs	r3, #144	; 0x90
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	429a      	cmp	r2, r3
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x1d6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a41      	ldr	r2, [pc, #260]	; (8002370 <HAL_GPIO_Init+0x2c4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x1d2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a40      	ldr	r2, [pc, #256]	; (8002374 <HAL_GPIO_Init+0x2c8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x1ce>
 8002276:	2302      	movs	r3, #2
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x1d8>
 800227a:	2305      	movs	r3, #5
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x1d8>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x1d8>
 8002282:	2300      	movs	r3, #0
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	2103      	movs	r1, #3
 8002288:	400a      	ands	r2, r1
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4093      	lsls	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002294:	4935      	ldr	r1, [pc, #212]	; (800236c <HAL_GPIO_Init+0x2c0>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a2:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	025b      	lsls	r3, r3, #9
 80022ba:	4013      	ands	r3, r2
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	029b      	lsls	r3, r3, #10
 80022e4:	4013      	ands	r3, r2
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43da      	mvns	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	035b      	lsls	r3, r3, #13
 800230e:	4013      	ands	r3, r2
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43da      	mvns	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	039b      	lsls	r3, r3, #14
 8002338:	4013      	ands	r3, r2
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_GPIO_Init+0x2cc>)
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	40da      	lsrs	r2, r3
 8002358:	1e13      	subs	r3, r2, #0
 800235a:	d000      	beq.n	800235e <HAL_GPIO_Init+0x2b2>
 800235c:	e6ae      	b.n	80020bc <HAL_GPIO_Init+0x10>
  } 
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b006      	add	sp, #24
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000
 8002370:	48000400 	.word	0x48000400
 8002374:	48000800 	.word	0x48000800
 8002378:	40010400 	.word	0x40010400

0800237c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	000a      	movs	r2, r1
 8002386:	1cbb      	adds	r3, r7, #2
 8002388:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	1cba      	adds	r2, r7, #2
 8002390:	8812      	ldrh	r2, [r2, #0]
 8002392:	4013      	ands	r3, r2
 8002394:	d004      	beq.n	80023a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002396:	230f      	movs	r3, #15
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e003      	b.n	80023a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a0:	230f      	movs	r3, #15
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023a8:	230f      	movs	r3, #15
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
  }
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	0008      	movs	r0, r1
 80023c0:	0011      	movs	r1, r2
 80023c2:	1cbb      	adds	r3, r7, #2
 80023c4:	1c02      	adds	r2, r0, #0
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	1c7b      	adds	r3, r7, #1
 80023ca:	1c0a      	adds	r2, r1, #0
 80023cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ce:	1c7b      	adds	r3, r7, #1
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023d6:	1cbb      	adds	r3, r7, #2
 80023d8:	881a      	ldrh	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023de:	e003      	b.n	80023e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e0:	1cbb      	adds	r3, r7, #2
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	0002      	movs	r2, r0
 80023f8:	1dbb      	adds	r3, r7, #6
 80023fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	1dba      	adds	r2, r7, #6
 8002402:	8812      	ldrh	r2, [r2, #0]
 8002404:	4013      	ands	r3, r2
 8002406:	d008      	beq.n	800241a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800240a:	1dba      	adds	r2, r7, #6
 800240c:	8812      	ldrh	r2, [r2, #0]
 800240e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f807 	bl	8002428 <HAL_GPIO_EXTI_Callback>
  }
}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	40010400 	.word	0x40010400

08002428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	0002      	movs	r2, r0
 8002430:	1dbb      	adds	r3, r7, #6
 8002432:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e082      	b.n	8002554 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2241      	movs	r2, #65	; 0x41
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f7fe ffff 	bl	8001468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2241      	movs	r2, #65	; 0x41
 800246e:	2124      	movs	r1, #36	; 0x24
 8002470:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	438a      	bics	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4934      	ldr	r1, [pc, #208]	; (800255c <HAL_I2C_Init+0x120>)
 800248c:	400a      	ands	r2, r1
 800248e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4931      	ldr	r1, [pc, #196]	; (8002560 <HAL_I2C_Init+0x124>)
 800249c:	400a      	ands	r2, r1
 800249e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d108      	bne.n	80024ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0209      	lsls	r1, r1, #8
 80024b4:	430a      	orrs	r2, r1
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	e007      	b.n	80024ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2184      	movs	r1, #132	; 0x84
 80024c4:	0209      	lsls	r1, r1, #8
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d104      	bne.n	80024dc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	491f      	ldr	r1, [pc, #124]	; (8002564 <HAL_I2C_Init+0x128>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	491a      	ldr	r1, [pc, #104]	; (8002560 <HAL_I2C_Init+0x124>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	431a      	orrs	r2, r3
 8002506:	0011      	movs	r1, r2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	021a      	lsls	r2, r3, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69d9      	ldr	r1, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1a      	ldr	r2, [r3, #32]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2101      	movs	r1, #1
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2241      	movs	r2, #65	; 0x41
 8002540:	2120      	movs	r1, #32
 8002542:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2242      	movs	r2, #66	; 0x42
 800254e:	2100      	movs	r1, #0
 8002550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	0018      	movs	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}
 800255c:	f0ffffff 	.word	0xf0ffffff
 8002560:	ffff7fff 	.word	0xffff7fff
 8002564:	02008000 	.word	0x02008000

08002568 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	000c      	movs	r4, r1
 8002572:	0010      	movs	r0, r2
 8002574:	0019      	movs	r1, r3
 8002576:	230a      	movs	r3, #10
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	1c22      	adds	r2, r4, #0
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	2308      	movs	r3, #8
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	1c02      	adds	r2, r0, #0
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	1dbb      	adds	r3, r7, #6
 8002588:	1c0a      	adds	r2, r1, #0
 800258a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2241      	movs	r2, #65	; 0x41
 8002590:	5c9b      	ldrb	r3, [r3, r2]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b20      	cmp	r3, #32
 8002596:	d000      	beq.n	800259a <HAL_I2C_Mem_Write+0x32>
 8002598:	e10c      	b.n	80027b4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_I2C_Mem_Write+0x42>
 80025a0:	232c      	movs	r3, #44	; 0x2c
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0ff      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_I2C_Mem_Write+0x5c>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0f8      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2240      	movs	r2, #64	; 0x40
 80025c8:	2101      	movs	r1, #1
 80025ca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025cc:	f7ff fb18 	bl	8001c00 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	0219      	lsls	r1, r3, #8
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2319      	movs	r3, #25
 80025e0:	2201      	movs	r2, #1
 80025e2:	f000 f975 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	1e03      	subs	r3, r0, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0e3      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2241      	movs	r2, #65	; 0x41
 80025f2:	2121      	movs	r1, #33	; 0x21
 80025f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2242      	movs	r2, #66	; 0x42
 80025fa:	2140      	movs	r1, #64	; 0x40
 80025fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	222c      	movs	r2, #44	; 0x2c
 800260e:	18ba      	adds	r2, r7, r2
 8002610:	8812      	ldrh	r2, [r2, #0]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	881c      	ldrh	r4, [r3, #0]
 800261e:	2308      	movs	r3, #8
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	881a      	ldrh	r2, [r3, #0]
 8002624:	230a      	movs	r3, #10
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	8819      	ldrh	r1, [r3, #0]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	0023      	movs	r3, r4
 8002636:	f000 f8c5 	bl	80027c4 <I2C_RequestMemoryWrite>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d005      	beq.n	800264a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2240      	movs	r2, #64	; 0x40
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0b5      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	2bff      	cmp	r3, #255	; 0xff
 8002652:	d911      	bls.n	8002678 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	b2da      	uxtb	r2, r3
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	045c      	lsls	r4, r3, #17
 8002664:	230a      	movs	r3, #10
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	8819      	ldrh	r1, [r3, #0]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	2300      	movs	r3, #0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	0023      	movs	r3, r4
 8002672:	f000 fa4d 	bl	8002b10 <I2C_TransferConfig>
 8002676:	e012      	b.n	800269e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	b2da      	uxtb	r2, r3
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	049c      	lsls	r4, r3, #18
 800268c:	230a      	movs	r3, #10
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	8819      	ldrh	r1, [r3, #0]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	2300      	movs	r3, #0
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	0023      	movs	r3, r4
 800269a:	f000 fa39 	bl	8002b10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f952 	bl	800294e <I2C_WaitOnTXISFlagUntilTimeout>
 80026aa:	1e03      	subs	r3, r0, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e081      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03a      	beq.n	8002762 <HAL_I2C_Mem_Write+0x1fa>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d136      	bne.n	8002762 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	0013      	movs	r3, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	f000 f8e5 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002706:	1e03      	subs	r3, r0, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e053      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	2bff      	cmp	r3, #255	; 0xff
 8002716:	d911      	bls.n	800273c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	22ff      	movs	r2, #255	; 0xff
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	b2da      	uxtb	r2, r3
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	045c      	lsls	r4, r3, #17
 8002728:	230a      	movs	r3, #10
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	8819      	ldrh	r1, [r3, #0]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	0023      	movs	r3, r4
 8002736:	f000 f9eb 	bl	8002b10 <I2C_TransferConfig>
 800273a:	e012      	b.n	8002762 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	b2da      	uxtb	r2, r3
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	049c      	lsls	r4, r3, #18
 8002750:	230a      	movs	r3, #10
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	8819      	ldrh	r1, [r3, #0]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	2300      	movs	r3, #0
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	0023      	movs	r3, r4
 800275e:	f000 f9d7 	bl	8002b10 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d198      	bne.n	800269e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 f92a 	bl	80029cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d001      	beq.n	8002780 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e01a      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2220      	movs	r2, #32
 8002786:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	490b      	ldr	r1, [pc, #44]	; (80027c0 <HAL_I2C_Mem_Write+0x258>)
 8002794:	400a      	ands	r2, r1
 8002796:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2241      	movs	r2, #65	; 0x41
 800279c:	2120      	movs	r1, #32
 800279e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2242      	movs	r2, #66	; 0x42
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
  }
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b007      	add	sp, #28
 80027bc:	bd90      	pop	{r4, r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	fe00e800 	.word	0xfe00e800

080027c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	000c      	movs	r4, r1
 80027ce:	0010      	movs	r0, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	250a      	movs	r5, #10
 80027d4:	197b      	adds	r3, r7, r5
 80027d6:	1c22      	adds	r2, r4, #0
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	2308      	movs	r3, #8
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	1c02      	adds	r2, r0, #0
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	1dbb      	adds	r3, r7, #6
 80027e4:	1c0a      	adds	r2, r1, #0
 80027e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027e8:	1dbb      	adds	r3, r7, #6
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	045c      	lsls	r4, r3, #17
 80027f2:	197b      	adds	r3, r7, r5
 80027f4:	8819      	ldrh	r1, [r3, #0]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	4b23      	ldr	r3, [pc, #140]	; (8002888 <I2C_RequestMemoryWrite+0xc4>)
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	0023      	movs	r3, r4
 80027fe:	f000 f987 	bl	8002b10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	6a39      	ldr	r1, [r7, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f8a0 	bl	800294e <I2C_WaitOnTXISFlagUntilTimeout>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d001      	beq.n	8002816 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e033      	b.n	800287e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002816:	1dbb      	adds	r3, r7, #6
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d107      	bne.n	800282e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800281e:	2308      	movs	r3, #8
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
 800282c:	e019      	b.n	8002862 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800282e:	2308      	movs	r3, #8
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	b29b      	uxth	r3, r3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6a39      	ldr	r1, [r7, #32]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	0018      	movs	r0, r3
 8002848:	f000 f881 	bl	800294e <I2C_WaitOnTXISFlagUntilTimeout>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e014      	b.n	800287e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002854:	2308      	movs	r3, #8
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002862:	6a3a      	ldr	r2, [r7, #32]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	0013      	movs	r3, r2
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	f000 f82e 	bl	80028d0 <I2C_WaitOnFlagUntilTimeout>
 8002874:	1e03      	subs	r3, r0, #0
 8002876:	d001      	beq.n	800287c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b004      	add	sp, #16
 8002884:	bdb0      	pop	{r4, r5, r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	80002000 	.word	0x80002000

0800288c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d103      	bne.n	80028aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2201      	movs	r2, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d007      	beq.n	80028c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2101      	movs	r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	619a      	str	r2, [r3, #24]
  }
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	1dfb      	adds	r3, r7, #7
 80028de:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e0:	e021      	b.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	d01e      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e8:	f7ff f98a 	bl	8001c00 <HAL_GetTick>
 80028ec:	0002      	movs	r2, r0
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d302      	bcc.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x2e>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d113      	bne.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	2220      	movs	r2, #32
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2241      	movs	r2, #65	; 0x41
 800290e:	2120      	movs	r1, #32
 8002910:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2242      	movs	r2, #66	; 0x42
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	425a      	negs	r2, r3
 8002936:	4153      	adcs	r3, r2
 8002938:	b2db      	uxtb	r3, r3
 800293a:	001a      	movs	r2, r3
 800293c:	1dfb      	adds	r3, r7, #7
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d0ce      	beq.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}

0800294e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800295a:	e02b      	b.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f86e 	bl	8002a44 <I2C_IsAcknowledgeFailed>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e029      	b.n	80029c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	3301      	adds	r3, #1
 8002974:	d01e      	beq.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002976:	f7ff f943 	bl	8001c00 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	d302      	bcc.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d113      	bne.n	80029b4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	2220      	movs	r2, #32
 8002992:	431a      	orrs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2241      	movs	r2, #65	; 0x41
 800299c:	2120      	movs	r1, #32
 800299e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2242      	movs	r2, #66	; 0x42
 80029a4:	2100      	movs	r1, #0
 80029a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	2100      	movs	r1, #0
 80029ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e007      	b.n	80029c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d1cc      	bne.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d8:	e028      	b.n	8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 f82f 	bl	8002a44 <I2C_IsAcknowledgeFailed>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d001      	beq.n	80029ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e026      	b.n	8002a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7ff f907 	bl	8001c00 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d113      	bne.n	8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	2220      	movs	r2, #32
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2241      	movs	r2, #65	; 0x41
 8002a14:	2120      	movs	r1, #32
 8002a16:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2242      	movs	r2, #66	; 0x42
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	2100      	movs	r1, #0
 8002a26:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2220      	movs	r2, #32
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d1cf      	bne.n	80029da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b004      	add	sp, #16
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2210      	movs	r2, #16
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d151      	bne.n	8002b02 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a5e:	e021      	b.n	8002aa4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3301      	adds	r3, #1
 8002a64:	d01e      	beq.n	8002aa4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7ff f8cb 	bl	8001c00 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_IsAcknowledgeFailed+0x38>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d113      	bne.n	8002aa4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	2220      	movs	r2, #32
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2241      	movs	r2, #65	; 0x41
 8002a8c:	2120      	movs	r1, #32
 8002a8e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2242      	movs	r2, #66	; 0x42
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e02f      	b.n	8002b04 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d1d6      	bne.n	8002a60 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff fee1 	bl	800288c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	490d      	ldr	r1, [pc, #52]	; (8002b0c <I2C_IsAcknowledgeFailed+0xc8>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	2204      	movs	r2, #4
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2241      	movs	r2, #65	; 0x41
 8002aea:	2120      	movs	r1, #32
 8002aec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2242      	movs	r2, #66	; 0x42
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2240      	movs	r2, #64	; 0x40
 8002afa:	2100      	movs	r1, #0
 8002afc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	0018      	movs	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	fe00e800 	.word	0xfe00e800

08002b10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	0008      	movs	r0, r1
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	240a      	movs	r4, #10
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	1c02      	adds	r2, r0, #0
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	2009      	movs	r0, #9
 8002b28:	183b      	adds	r3, r7, r0
 8002b2a:	1c0a      	adds	r2, r1, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	0d51      	lsrs	r1, r2, #21
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	00d2      	lsls	r2, r2, #3
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	490e      	ldr	r1, [pc, #56]	; (8002b78 <I2C_TransferConfig+0x68>)
 8002b40:	430a      	orrs	r2, r1
 8002b42:	43d2      	mvns	r2, r2
 8002b44:	401a      	ands	r2, r3
 8002b46:	0011      	movs	r1, r2
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	059b      	lsls	r3, r3, #22
 8002b4e:	0d9a      	lsrs	r2, r3, #22
 8002b50:	183b      	adds	r3, r7, r0
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	0418      	lsls	r0, r3, #16
 8002b56:	23ff      	movs	r3, #255	; 0xff
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	4003      	ands	r3, r0
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b005      	add	sp, #20
 8002b74:	bd90      	pop	{r4, r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	03ff63ff 	.word	0x03ff63ff

08002b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2241      	movs	r2, #65	; 0x41
 8002b8a:	5c9b      	ldrb	r3, [r3, r2]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d138      	bne.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	5c9b      	ldrb	r3, [r3, r2]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e032      	b.n	8002c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2240      	movs	r2, #64	; 0x40
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2241      	movs	r2, #65	; 0x41
 8002bac:	2124      	movs	r1, #36	; 0x24
 8002bae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4911      	ldr	r1, [pc, #68]	; (8002c10 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2101      	movs	r1, #1
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2241      	movs	r2, #65	; 0x41
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b002      	add	sp, #8
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	ffffefff 	.word	0xffffefff

08002c14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2241      	movs	r2, #65	; 0x41
 8002c22:	5c9b      	ldrb	r3, [r3, r2]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d139      	bne.n	8002c9e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	5c9b      	ldrb	r3, [r3, r2]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e033      	b.n	8002ca0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2240      	movs	r2, #64	; 0x40
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2241      	movs	r2, #65	; 0x41
 8002c44:	2124      	movs	r1, #36	; 0x24
 8002c46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	438a      	bics	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2241      	movs	r2, #65	; 0x41
 8002c8e:	2120      	movs	r1, #32
 8002c90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b004      	add	sp, #16
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	fffff0ff 	.word	0xfffff0ff

08002cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e303      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d100      	bne.n	8002cca <HAL_RCC_OscConfig+0x1e>
 8002cc8:	e08d      	b.n	8002de6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cca:	4bc4      	ldr	r3, [pc, #784]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	220c      	movs	r2, #12
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cd6:	4bc1      	ldr	r3, [pc, #772]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	220c      	movs	r2, #12
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x64>
 8002ce2:	4bbe      	ldr	r3, [pc, #760]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	025b      	lsls	r3, r3, #9
 8002cea:	401a      	ands	r2, r3
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	025b      	lsls	r3, r3, #9
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	4bb9      	ldr	r3, [pc, #740]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	029b      	lsls	r3, r3, #10
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <HAL_RCC_OscConfig+0x56>
 8002d00:	e070      	b.n	8002de4 <HAL_RCC_OscConfig+0x138>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d000      	beq.n	8002d0c <HAL_RCC_OscConfig+0x60>
 8002d0a:	e06b      	b.n	8002de4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e2da      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_OscConfig+0x7c>
 8002d18:	4bb0      	ldr	r3, [pc, #704]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4baf      	ldr	r3, [pc, #700]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0249      	lsls	r1, r1, #9
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e02f      	b.n	8002d88 <HAL_RCC_OscConfig+0xdc>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x9e>
 8002d30:	4baa      	ldr	r3, [pc, #680]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4ba9      	ldr	r3, [pc, #676]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d36:	49aa      	ldr	r1, [pc, #680]	; (8002fe0 <HAL_RCC_OscConfig+0x334>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	4ba7      	ldr	r3, [pc, #668]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4ba6      	ldr	r3, [pc, #664]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d42:	49a8      	ldr	r1, [pc, #672]	; (8002fe4 <HAL_RCC_OscConfig+0x338>)
 8002d44:	400a      	ands	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e01e      	b.n	8002d88 <HAL_RCC_OscConfig+0xdc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d10e      	bne.n	8002d70 <HAL_RCC_OscConfig+0xc4>
 8002d52:	4ba2      	ldr	r3, [pc, #648]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4ba1      	ldr	r3, [pc, #644]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	02c9      	lsls	r1, r1, #11
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	4b9e      	ldr	r3, [pc, #632]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b9d      	ldr	r3, [pc, #628]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	0249      	lsls	r1, r1, #9
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0xdc>
 8002d70:	4b9a      	ldr	r3, [pc, #616]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b99      	ldr	r3, [pc, #612]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d76:	499a      	ldr	r1, [pc, #616]	; (8002fe0 <HAL_RCC_OscConfig+0x334>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	4b97      	ldr	r3, [pc, #604]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4b96      	ldr	r3, [pc, #600]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002d82:	4998      	ldr	r1, [pc, #608]	; (8002fe4 <HAL_RCC_OscConfig+0x338>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d014      	beq.n	8002dba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe ff36 	bl	8001c00 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9a:	f7fe ff31 	bl	8001c00 <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b64      	cmp	r3, #100	; 0x64
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e28c      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dac:	4b8b      	ldr	r3, [pc, #556]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0xee>
 8002db8:	e015      	b.n	8002de6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe ff21 	bl	8001c00 <HAL_GetTick>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe ff1c 	bl	8001c00 <HAL_GetTick>
 8002dc8:	0002      	movs	r2, r0
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e277      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	4b81      	ldr	r3, [pc, #516]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	4013      	ands	r3, r2
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x118>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2202      	movs	r2, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	d100      	bne.n	8002df2 <HAL_RCC_OscConfig+0x146>
 8002df0:	e069      	b.n	8002ec6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002df2:	4b7a      	ldr	r3, [pc, #488]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	220c      	movs	r2, #12
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dfc:	4b77      	ldr	r3, [pc, #476]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	220c      	movs	r2, #12
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d11c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x196>
 8002e08:	4b74      	ldr	r3, [pc, #464]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	4013      	ands	r3, r2
 8002e12:	d116      	bne.n	8002e42 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e14:	4b71      	ldr	r3, [pc, #452]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d005      	beq.n	8002e2a <HAL_RCC_OscConfig+0x17e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d001      	beq.n	8002e2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e24d      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2a:	4b6c      	ldr	r3, [pc, #432]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	22f8      	movs	r2, #248	; 0xf8
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	00da      	lsls	r2, r3, #3
 8002e3a:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e40:	e041      	b.n	8002ec6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d024      	beq.n	8002e94 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e4a:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4b63      	ldr	r3, [pc, #396]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7fe fed3 	bl	8001c00 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e60:	f7fe fece 	bl	8001c00 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e229      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	4b5a      	ldr	r3, [pc, #360]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d0f1      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b57      	ldr	r3, [pc, #348]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	22f8      	movs	r2, #248	; 0xf8
 8002e82:	4393      	bics	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00da      	lsls	r2, r3, #3
 8002e8c:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e018      	b.n	8002ec6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e94:	4b51      	ldr	r3, [pc, #324]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b50      	ldr	r3, [pc, #320]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe feae 	bl	8001c00 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eaa:	f7fe fea9 	bl	8001c00 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e204      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebc:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d1f1      	bne.n	8002eaa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d036      	beq.n	8002f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ed8:	4b40      	ldr	r3, [pc, #256]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002edc:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002ede:	2101      	movs	r1, #1
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fe8c 	bl	8001c00 <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe fe87 	bl	8001c00 <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1e2      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f00:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	2202      	movs	r2, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	d0f1      	beq.n	8002eee <HAL_RCC_OscConfig+0x242>
 8002f0a:	e018      	b.n	8002f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f10:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f12:	2101      	movs	r1, #1
 8002f14:	438a      	bics	r2, r1
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7fe fe72 	bl	8001c00 <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f22:	f7fe fe6d 	bl	8001c00 <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1c8      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2202      	movs	r2, #2
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d1f1      	bne.n	8002f22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2204      	movs	r2, #4
 8002f44:	4013      	ands	r3, r2
 8002f46:	d100      	bne.n	8002f4a <HAL_RCC_OscConfig+0x29e>
 8002f48:	e0b6      	b.n	80030b8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4a:	231f      	movs	r3, #31
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	055b      	lsls	r3, r3, #21
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d111      	bne.n	8002f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0549      	lsls	r1, r1, #21
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	61da      	str	r2, [r3, #28]
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	055b      	lsls	r3, r3, #21
 8002f74:	4013      	ands	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f7a:	231f      	movs	r3, #31
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_OscConfig+0x33c>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d11a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_RCC_OscConfig+0x33c>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_RCC_OscConfig+0x33c>)
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	0049      	lsls	r1, r1, #1
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fe30 	bl	8001c00 <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe fe2b 	bl	8001c00 <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e186      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_OscConfig+0x33c>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10f      	bne.n	8002fec <HAL_RCC_OscConfig+0x340>
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <HAL_RCC_OscConfig+0x330>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	621a      	str	r2, [r3, #32]
 8002fd8:	e036      	b.n	8003048 <HAL_RCC_OscConfig+0x39c>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	fffeffff 	.word	0xfffeffff
 8002fe4:	fffbffff 	.word	0xfffbffff
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x362>
 8002ff4:	4bb6      	ldr	r3, [pc, #728]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	4bb5      	ldr	r3, [pc, #724]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	621a      	str	r2, [r3, #32]
 8003000:	4bb3      	ldr	r3, [pc, #716]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	4bb2      	ldr	r3, [pc, #712]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003006:	2104      	movs	r1, #4
 8003008:	438a      	bics	r2, r1
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x39c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b05      	cmp	r3, #5
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x384>
 8003016:	4bae      	ldr	r3, [pc, #696]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	4bad      	ldr	r3, [pc, #692]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800301c:	2104      	movs	r1, #4
 800301e:	430a      	orrs	r2, r1
 8003020:	621a      	str	r2, [r3, #32]
 8003022:	4bab      	ldr	r3, [pc, #684]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	4baa      	ldr	r3, [pc, #680]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003028:	2101      	movs	r1, #1
 800302a:	430a      	orrs	r2, r1
 800302c:	621a      	str	r2, [r3, #32]
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0x39c>
 8003030:	4ba7      	ldr	r3, [pc, #668]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003032:	6a1a      	ldr	r2, [r3, #32]
 8003034:	4ba6      	ldr	r3, [pc, #664]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003036:	2101      	movs	r1, #1
 8003038:	438a      	bics	r2, r1
 800303a:	621a      	str	r2, [r3, #32]
 800303c:	4ba4      	ldr	r3, [pc, #656]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	4ba3      	ldr	r3, [pc, #652]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003042:	2104      	movs	r1, #4
 8003044:	438a      	bics	r2, r1
 8003046:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d014      	beq.n	800307a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe fdd6 	bl	8001c00 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003058:	e009      	b.n	800306e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe fdd1 	bl	8001c00 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	4a9b      	ldr	r2, [pc, #620]	; (80032d4 <HAL_RCC_OscConfig+0x628>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e12b      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	4b98      	ldr	r3, [pc, #608]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	2202      	movs	r2, #2
 8003074:	4013      	ands	r3, r2
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x3ae>
 8003078:	e013      	b.n	80030a2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fdc1 	bl	8001c00 <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003082:	e009      	b.n	8003098 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe fdbc 	bl	8001c00 <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	4a91      	ldr	r2, [pc, #580]	; (80032d4 <HAL_RCC_OscConfig+0x628>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e116      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003098:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	2202      	movs	r2, #2
 800309e:	4013      	ands	r3, r2
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a2:	231f      	movs	r3, #31
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ac:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	4b87      	ldr	r3, [pc, #540]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80030b2:	4989      	ldr	r1, [pc, #548]	; (80032d8 <HAL_RCC_OscConfig+0x62c>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2210      	movs	r2, #16
 80030be:	4013      	ands	r3, r2
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d12a      	bne.n	8003120 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030ca:	4b81      	ldr	r3, [pc, #516]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80030cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ce:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80030d0:	2104      	movs	r1, #4
 80030d2:	430a      	orrs	r2, r1
 80030d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80030d6:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80030d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030da:	4b7d      	ldr	r3, [pc, #500]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80030dc:	2101      	movs	r1, #1
 80030de:	430a      	orrs	r2, r1
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fd8d 	bl	8001c00 <HAL_GetTick>
 80030e6:	0003      	movs	r3, r0
 80030e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030ec:	f7fe fd88 	bl	8001c00 <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0e3      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80030fe:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d0f1      	beq.n	80030ec <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003108:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	22f8      	movs	r2, #248	; 0xf8
 800310e:	4393      	bics	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	00da      	lsls	r2, r3, #3
 8003118:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800311a:	430a      	orrs	r2, r1
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
 800311e:	e034      	b.n	800318a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	3305      	adds	r3, #5
 8003126:	d111      	bne.n	800314c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003128:	4b69      	ldr	r3, [pc, #420]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800312a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800312e:	2104      	movs	r1, #4
 8003130:	438a      	bics	r2, r1
 8003132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	22f8      	movs	r2, #248	; 0xf8
 800313a:	4393      	bics	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	00da      	lsls	r2, r3, #3
 8003144:	4b62      	ldr	r3, [pc, #392]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003146:	430a      	orrs	r2, r1
 8003148:	635a      	str	r2, [r3, #52]	; 0x34
 800314a:	e01e      	b.n	800318a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800314c:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800314e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003150:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003152:	2104      	movs	r1, #4
 8003154:	430a      	orrs	r2, r1
 8003156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003158:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	4b5c      	ldr	r3, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800315e:	2101      	movs	r1, #1
 8003160:	438a      	bics	r2, r1
 8003162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fe fd4c 	bl	8001c00 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800316e:	f7fe fd47 	bl	8001c00 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0a2      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	2202      	movs	r2, #2
 8003186:	4013      	ands	r3, r2
 8003188:	d1f1      	bne.n	800316e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d100      	bne.n	8003194 <HAL_RCC_OscConfig+0x4e8>
 8003192:	e097      	b.n	80032c4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003194:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	220c      	movs	r2, #12
 800319a:	4013      	ands	r3, r2
 800319c:	2b08      	cmp	r3, #8
 800319e:	d100      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4f6>
 80031a0:	e06b      	b.n	800327a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d14c      	bne.n	8003244 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80031b0:	494a      	ldr	r1, [pc, #296]	; (80032dc <HAL_RCC_OscConfig+0x630>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7fe fd23 	bl	8001c00 <HAL_GetTick>
 80031ba:	0003      	movs	r3, r0
 80031bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe fd1e 	bl	8001c00 <HAL_GetTick>
 80031c4:	0002      	movs	r2, r0
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e079      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	049b      	lsls	r3, r3, #18
 80031da:	4013      	ands	r3, r2
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031de:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	220f      	movs	r2, #15
 80031e4:	4393      	bics	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	4b38      	ldr	r3, [pc, #224]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80031ee:	430a      	orrs	r2, r1
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a3a      	ldr	r2, [pc, #232]	; (80032e0 <HAL_RCC_OscConfig+0x634>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	431a      	orrs	r2, r3
 8003206:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800320c:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0449      	lsls	r1, r1, #17
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fcf1 	bl	8001c00 <HAL_GetTick>
 800321e:	0003      	movs	r3, r0
 8003220:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fcec 	bl	8001c00 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e047      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	049b      	lsls	r3, r3, #18
 800323e:	4013      	ands	r3, r2
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x578>
 8003242:	e03f      	b.n	80032c4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800324a:	4924      	ldr	r1, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x630>)
 800324c:	400a      	ands	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fe fcd6 	bl	8001c00 <HAL_GetTick>
 8003254:	0003      	movs	r3, r0
 8003256:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325a:	f7fe fcd1 	bl	8001c00 <HAL_GetTick>
 800325e:	0002      	movs	r2, r0
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e02c      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	049b      	lsls	r3, r3, #18
 8003274:	4013      	ands	r3, r2
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x5ae>
 8003278:	e024      	b.n	80032c4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e01f      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_OscConfig+0x624>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	025b      	lsls	r3, r3, #9
 8003298:	401a      	ands	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10e      	bne.n	80032c0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	220f      	movs	r2, #15
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	23f0      	movs	r3, #240	; 0xf0
 80032b4:	039b      	lsls	r3, r3, #14
 80032b6:	401a      	ands	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b008      	add	sp, #32
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40021000 	.word	0x40021000
 80032d4:	00001388 	.word	0x00001388
 80032d8:	efffffff 	.word	0xefffffff
 80032dc:	feffffff 	.word	0xfeffffff
 80032e0:	ffc2ffff 	.word	0xffc2ffff

080032e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0b3      	b.n	8003460 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2201      	movs	r2, #1
 80032fe:	4013      	ands	r3, r2
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d911      	bls.n	800332a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	4393      	bics	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	4b55      	ldr	r3, [pc, #340]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e09a      	b.n	8003460 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2202      	movs	r2, #2
 8003330:	4013      	ands	r3, r2
 8003332:	d015      	beq.n	8003360 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2204      	movs	r2, #4
 800333a:	4013      	ands	r3, r2
 800333c:	d006      	beq.n	800334c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800333e:	4b4b      	ldr	r3, [pc, #300]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 8003344:	21e0      	movs	r1, #224	; 0xe0
 8003346:	00c9      	lsls	r1, r1, #3
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	22f0      	movs	r2, #240	; 0xf0
 8003352:	4393      	bics	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	4b44      	ldr	r3, [pc, #272]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2201      	movs	r2, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b3e      	ldr	r3, [pc, #248]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d114      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06e      	b.n	8003460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	049b      	lsls	r3, r3, #18
 8003392:	4013      	ands	r3, r2
 8003394:	d108      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e062      	b.n	8003460 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2202      	movs	r2, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e05b      	b.n	8003460 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a8:	4b30      	ldr	r3, [pc, #192]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2203      	movs	r2, #3
 80033ae:	4393      	bics	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4b2d      	ldr	r3, [pc, #180]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fe fc20 	bl	8001c00 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c4:	e009      	b.n	80033da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c6:	f7fe fc1b 	bl	8001c00 <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_RCC_ClockConfig+0x18c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e042      	b.n	8003460 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	220c      	movs	r2, #12
 80033e0:	401a      	ands	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1ec      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d211      	bcs.n	800341e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2201      	movs	r2, #1
 8003400:	4393      	bics	r3, r2
 8003402:	0019      	movs	r1, r3
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x184>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2201      	movs	r2, #1
 8003412:	4013      	ands	r3, r2
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e020      	b.n	8003460 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2204      	movs	r2, #4
 8003424:	4013      	ands	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a11      	ldr	r2, [pc, #68]	; (8003474 <HAL_RCC_ClockConfig+0x190>)
 800342e:	4013      	ands	r3, r2
 8003430:	0019      	movs	r1, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800343c:	f000 f820 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 8003440:	0001      	movs	r1, r0
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x188>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	220f      	movs	r2, #15
 800344a:	4013      	ands	r3, r2
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x194>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	000a      	movs	r2, r1
 8003452:	40da      	lsrs	r2, r3
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_ClockConfig+0x198>)
 8003456:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003458:	2000      	movs	r0, #0
 800345a:	f7fe fb8b 	bl	8001b74 <HAL_InitTick>
  
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	b004      	add	sp, #16
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40022000 	.word	0x40022000
 800346c:	40021000 	.word	0x40021000
 8003470:	00001388 	.word	0x00001388
 8003474:	fffff8ff 	.word	0xfffff8ff
 8003478:	08006904 	.word	0x08006904
 800347c:	20000008 	.word	0x20000008

08003480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b08f      	sub	sp, #60	; 0x3c
 8003484:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003486:	2314      	movs	r3, #20
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	4a2b      	ldr	r2, [pc, #172]	; (8003538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800348c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800348e:	c313      	stmia	r3!, {r0, r1, r4}
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003494:	1d3b      	adds	r3, r7, #4
 8003496:	4a29      	ldr	r2, [pc, #164]	; (800353c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003498:	ca13      	ldmia	r2!, {r0, r1, r4}
 800349a:	c313      	stmia	r3!, {r0, r1, r4}
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a4:	2300      	movs	r3, #0
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a8:	2300      	movs	r3, #0
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80034b4:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	220c      	movs	r2, #12
 80034be:	4013      	ands	r3, r2
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d002      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x4a>
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d003      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x50>
 80034c8:	e02d      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034ce:	e02d      	b.n	800352c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	0c9b      	lsrs	r3, r3, #18
 80034d4:	220f      	movs	r2, #15
 80034d6:	4013      	ands	r3, r2
 80034d8:	2214      	movs	r2, #20
 80034da:	18ba      	adds	r2, r7, r2
 80034dc:	5cd3      	ldrb	r3, [r2, r3]
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80034e0:	4b17      	ldr	r3, [pc, #92]	; (8003540 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	220f      	movs	r2, #15
 80034e6:	4013      	ands	r3, r2
 80034e8:	1d3a      	adds	r2, r7, #4
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	025b      	lsls	r3, r3, #9
 80034f4:	4013      	ands	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fa:	4812      	ldr	r0, [pc, #72]	; (8003544 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034fc:	f7fc fe0c 	bl	8000118 <__udivsi3>
 8003500:	0003      	movs	r3, r0
 8003502:	001a      	movs	r2, r3
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	4353      	muls	r3, r2
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
 800350a:	e009      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800350c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800350e:	000a      	movs	r2, r1
 8003510:	0152      	lsls	r2, r2, #5
 8003512:	1a52      	subs	r2, r2, r1
 8003514:	0193      	lsls	r3, r2, #6
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	185b      	adds	r3, r3, r1
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003524:	e002      	b.n	800352c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800352a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800352e:	0018      	movs	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	b00f      	add	sp, #60	; 0x3c
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	08006178 	.word	0x08006178
 800353c:	08006188 	.word	0x08006188
 8003540:	40021000 	.word	0x40021000
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b02      	ldr	r3, [pc, #8]	; (8003558 <HAL_RCC_GetHCLKFreq+0x10>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	20000008 	.word	0x20000008

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003560:	f7ff fff2 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003564:	0001      	movs	r1, r0
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	2207      	movs	r2, #7
 800356e:	4013      	ands	r3, r2
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003572:	5cd3      	ldrb	r3, [r2, r3]
 8003574:	40d9      	lsrs	r1, r3
 8003576:	000b      	movs	r3, r1
}    
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	40021000 	.word	0x40021000
 8003584:	08006914 	.word	0x08006914

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	025b      	lsls	r3, r3, #9
 80035a0:	4013      	ands	r3, r2
 80035a2:	d100      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80035a4:	e08f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2317      	movs	r3, #23
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b57      	ldr	r3, [pc, #348]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	055b      	lsls	r3, r3, #21
 80035b6:	4013      	ands	r3, r2
 80035b8:	d111      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	0549      	lsls	r1, r1, #21
 80035c4:	430a      	orrs	r2, r1
 80035c6:	61da      	str	r2, [r3, #28]
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	055b      	lsls	r3, r3, #21
 80035d0:	4013      	ands	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2317      	movs	r3, #23
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4013      	ands	r3, r2
 80035e8:	d11a      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b48      	ldr	r3, [pc, #288]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0049      	lsls	r1, r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fb02 	bl	8001c00 <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	e008      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fe fafd 	bl	8001c00 <HAL_GetTick>
 8003606:	0002      	movs	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b64      	cmp	r3, #100	; 0x64
 800360e:	d901      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e077      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4013      	ands	r3, r2
 800361e:	d0f0      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	23c0      	movs	r3, #192	; 0xc0
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d034      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	23c0      	movs	r3, #192	; 0xc0
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4013      	ands	r3, r2
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	429a      	cmp	r2, r3
 8003640:	d02c      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4a33      	ldr	r2, [pc, #204]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003648:	4013      	ands	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364c:	4b2f      	ldr	r3, [pc, #188]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800364e:	6a1a      	ldr	r2, [r3, #32]
 8003650:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	0249      	lsls	r1, r1, #9
 8003656:	430a      	orrs	r2, r1
 8003658:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800365a:	4b2c      	ldr	r3, [pc, #176]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003660:	492d      	ldr	r1, [pc, #180]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003662:	400a      	ands	r2, r1
 8003664:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d013      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe fac4 	bl	8001c00 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	e009      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe fabf 	bl	8001c00 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e038      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	4b1e      	ldr	r3, [pc, #120]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	2202      	movs	r2, #2
 8003698:	4013      	ands	r3, r2
 800369a:	d0f0      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4b18      	ldr	r3, [pc, #96]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036ac:	430a      	orrs	r2, r1
 80036ae:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036b0:	2317      	movs	r3, #23
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036c0:	4917      	ldr	r1, [pc, #92]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80036c2:	400a      	ands	r2, r1
 80036c4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	2203      	movs	r2, #3
 80036d6:	4393      	bics	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2220      	movs	r2, #32
 80036ea:	4013      	ands	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	2210      	movs	r2, #16
 80036f4:	4393      	bics	r3, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b006      	add	sp, #24
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000
 8003710:	40007000 	.word	0x40007000
 8003714:	fffffcff 	.word	0xfffffcff
 8003718:	fffeffff 	.word	0xfffeffff
 800371c:	00001388 	.word	0x00001388
 8003720:	efffffff 	.word	0xefffffff

08003724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e01e      	b.n	8003774 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	223d      	movs	r2, #61	; 0x3d
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223c      	movs	r2, #60	; 0x3c
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f7fd fed9 	bl	8001504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	223d      	movs	r2, #61	; 0x3d
 8003756:	2102      	movs	r1, #2
 8003758:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	0019      	movs	r1, r3
 8003764:	0010      	movs	r0, r2
 8003766:	f000 fded 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	223d      	movs	r2, #61	; 0x3d
 800376e:	2101      	movs	r1, #1
 8003770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2207      	movs	r2, #7
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d007      	beq.n	80037b6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b004      	add	sp, #16
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e01e      	b.n	8003810 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	223d      	movs	r2, #61	; 0x3d
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	223c      	movs	r2, #60	; 0x3c
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f815 	bl	8003818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223d      	movs	r2, #61	; 0x3d
 80037f2:	2102      	movs	r1, #2
 80037f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3304      	adds	r3, #4
 80037fe:	0019      	movs	r1, r3
 8003800:	0010      	movs	r0, r2
 8003802:	f000 fd9f 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	223d      	movs	r2, #61	; 0x3d
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	0018      	movs	r0, r3
 800383c:	f001 fa14 	bl	8004c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_TIM_PWM_Start+0x80>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_TIM_PWM_Start+0x36>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_TIM_PWM_Start+0x84>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIM_PWM_Start+0x36>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <HAL_TIM_PWM_Start+0x88>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_Start+0x3a>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_TIM_PWM_Start+0x3c>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	0209      	lsls	r1, r1, #8
 8003876:	430a      	orrs	r2, r1
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2207      	movs	r2, #7
 8003882:	4013      	ands	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b06      	cmp	r3, #6
 800388a:	d007      	beq.n	800389c <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2101      	movs	r1, #1
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b004      	add	sp, #16
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800

080038b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6839      	ldr	r1, [r7, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	0018      	movs	r0, r3
 80038c8:	f001 f9ce 	bl	8004c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a21      	ldr	r2, [pc, #132]	; (8003958 <HAL_TIM_PWM_Stop+0xa4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_TIM_PWM_Stop+0x36>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a20      	ldr	r2, [pc, #128]	; (800395c <HAL_TIM_PWM_Stop+0xa8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIM_PWM_Stop+0x36>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_TIM_PWM_Stop+0xac>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_Stop+0x3a>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <HAL_TIM_PWM_Stop+0x3c>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_TIM_PWM_Stop+0xb0>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	d10d      	bne.n	800391c <HAL_TIM_PWM_Stop+0x68>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_TIM_PWM_Stop+0xb4>)
 8003908:	4013      	ands	r3, r2
 800390a:	d107      	bne.n	800391c <HAL_TIM_PWM_Stop+0x68>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4915      	ldr	r1, [pc, #84]	; (800396c <HAL_TIM_PWM_Stop+0xb8>)
 8003918:	400a      	ands	r2, r1
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a10      	ldr	r2, [pc, #64]	; (8003964 <HAL_TIM_PWM_Stop+0xb0>)
 8003924:	4013      	ands	r3, r2
 8003926:	d10d      	bne.n	8003944 <HAL_TIM_PWM_Stop+0x90>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <HAL_TIM_PWM_Stop+0xb4>)
 8003930:	4013      	ands	r3, r2
 8003932:	d107      	bne.n	8003944 <HAL_TIM_PWM_Stop+0x90>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223d      	movs	r2, #61	; 0x3d
 8003948:	2101      	movs	r1, #1
 800394a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b002      	add	sp, #8
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	40012c00 	.word	0x40012c00
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800
 8003964:	00001111 	.word	0x00001111
 8003968:	00000444 	.word	0x00000444
 800396c:	ffff7fff 	.word	0xffff7fff

08003970 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e01e      	b.n	80039c0 <HAL_TIM_IC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	223d      	movs	r2, #61	; 0x3d
 8003986:	5c9b      	ldrb	r3, [r3, r2]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	223c      	movs	r2, #60	; 0x3c
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f815 	bl	80039c8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	223d      	movs	r2, #61	; 0x3d
 80039a2:	2102      	movs	r1, #2
 80039a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	0019      	movs	r1, r3
 80039b0:	0010      	movs	r0, r2
 80039b2:	f000 fcc7 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	223d      	movs	r2, #61	; 0x3d
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d011      	beq.n	8003a0c <HAL_TIM_IC_Start_IT+0x34>
 80039e8:	d802      	bhi.n	80039f0 <HAL_TIM_IC_Start_IT+0x18>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80039ee:	e028      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x6a>
  switch (Channel)
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d014      	beq.n	8003a1e <HAL_TIM_IC_Start_IT+0x46>
 80039f4:	2b0c      	cmp	r3, #12
 80039f6:	d01b      	beq.n	8003a30 <HAL_TIM_IC_Start_IT+0x58>
      break;
 80039f8:	e023      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2102      	movs	r1, #2
 8003a06:	430a      	orrs	r2, r1
 8003a08:	60da      	str	r2, [r3, #12]
      break;
 8003a0a:	e01a      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2104      	movs	r1, #4
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	60da      	str	r2, [r3, #12]
      break;
 8003a1c:	e011      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2108      	movs	r1, #8
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	60da      	str	r2, [r3, #12]
      break;
 8003a2e:	e008      	b.n	8003a42 <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2110      	movs	r1, #16
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	60da      	str	r2, [r3, #12]
      break;
 8003a40:	46c0      	nop			; (mov r8, r8)
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f001 f90c 	bl	8004c68 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2207      	movs	r2, #7
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d007      	beq.n	8003a72 <HAL_TIM_IC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e07c      	b.n	8003b8a <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	223d      	movs	r2, #61	; 0x3d
 8003a94:	5c9b      	ldrb	r3, [r3, r2]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	223c      	movs	r2, #60	; 0x3c
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fd fe22 	bl	80016f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	223d      	movs	r2, #61	; 0x3d
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4935      	ldr	r1, [pc, #212]	; (8003b94 <HAL_TIM_Encoder_Init+0x118>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	0019      	movs	r1, r3
 8003ace:	0010      	movs	r0, r2
 8003ad0:	f000 fc38 	bl	8004344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a27      	ldr	r2, [pc, #156]	; (8003b98 <HAL_TIM_Encoder_Init+0x11c>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <HAL_TIM_Encoder_Init+0x120>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <HAL_TIM_Encoder_Init+0x124>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	011a      	lsls	r2, r3, #4
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	031b      	lsls	r3, r3, #12
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2222      	movs	r2, #34	; 0x22
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2288      	movs	r2, #136	; 0x88
 8003b52:	4393      	bics	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4313      	orrs	r3, r2
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	223d      	movs	r2, #61	; 0x3d
 8003b84:	2101      	movs	r1, #1
 8003b86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b006      	add	sp, #24
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	ffffbff8 	.word	0xffffbff8
 8003b98:	fffffcfc 	.word	0xfffffcfc
 8003b9c:	fffff3f3 	.word	0xfffff3f3
 8003ba0:	ffff0f0f 	.word	0xffff0f0f

08003ba4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_TIM_Encoder_Start+0x16>
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d008      	beq.n	8003bca <HAL_TIM_Encoder_Start+0x26>
 8003bb8:	e00f      	b.n	8003bda <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f001 f850 	bl	8004c68 <TIM_CCxChannelCmd>
      break;
 8003bc8:	e016      	b.n	8003bf8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f001 f848 	bl	8004c68 <TIM_CCxChannelCmd>
      break;
 8003bd8:	e00e      	b.n	8003bf8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2201      	movs	r2, #1
 8003be0:	2100      	movs	r1, #0
 8003be2:	0018      	movs	r0, r3
 8003be4:	f001 f840 	bl	8004c68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2201      	movs	r2, #1
 8003bee:	2104      	movs	r1, #4
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f001 f839 	bl	8004c68 <TIM_CCxChannelCmd>
      break;
 8003bf6:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2101      	movs	r1, #1
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b002      	add	sp, #8
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d124      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d11d      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	4252      	negs	r2, r2
 8003c3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 fb5d 	bl	8004314 <HAL_TIM_IC_CaptureCallback>
 8003c5a:	e007      	b.n	8003c6c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f000 fb50 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 fb5c 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d125      	bne.n	8003ccc <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2204      	movs	r2, #4
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d11e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2205      	movs	r2, #5
 8003c94:	4252      	negs	r2, r2
 8003c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	23c0      	movs	r3, #192	; 0xc0
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 fb30 	bl	8004314 <HAL_TIM_IC_CaptureCallback>
 8003cb4:	e007      	b.n	8003cc6 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 fb23 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f000 fb2f 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d124      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d11d      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2209      	movs	r2, #9
 8003cee:	4252      	negs	r2, r2
 8003cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	2203      	movs	r2, #3
 8003d00:	4013      	ands	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 fb04 	bl	8004314 <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e007      	b.n	8003d1e <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	0018      	movs	r0, r3
 8003d12:	f000 faf7 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fb03 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	d125      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d11e      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2211      	movs	r2, #17
 8003d46:	4252      	negs	r2, r2
 8003d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	23c0      	movs	r3, #192	; 0xc0
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 fad7 	bl	8004314 <HAL_TIM_IC_CaptureCallback>
 8003d66:	e007      	b.n	8003d78 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f000 faca 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f000 fad6 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2201      	movs	r2, #1
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10f      	bne.n	8003dac <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d108      	bne.n	8003dac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4252      	negs	r2, r2
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 faa4 	bl	80042f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d10f      	bne.n	8003dda <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	d108      	bne.n	8003dda <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2281      	movs	r2, #129	; 0x81
 8003dce:	4252      	negs	r2, r2
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 ffcb 	bl	8004d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2240      	movs	r2, #64	; 0x40
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d10f      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2240      	movs	r2, #64	; 0x40
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d108      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2241      	movs	r2, #65	; 0x41
 8003dfc:	4252      	negs	r2, r2
 8003dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 fa96 	bl	8004334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	d10f      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d108      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2221      	movs	r2, #33	; 0x21
 8003e2a:	4252      	negs	r2, r2
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f000 ff95 	bl	8004d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	223c      	movs	r2, #60	; 0x3c
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e08a      	b.n	8003f70 <HAL_TIM_IC_ConfigChannel+0x130>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	223c      	movs	r2, #60	; 0x3c
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	223d      	movs	r2, #61	; 0x3d
 8003e66:	2102      	movs	r1, #2
 8003e68:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	6819      	ldr	r1, [r3, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f000 fd3a 	bl	80048f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	210c      	movs	r1, #12
 8003e90:	438a      	bics	r2, r1
 8003e92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6999      	ldr	r1, [r3, #24]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	619a      	str	r2, [r3, #24]
 8003ea6:	e05a      	b.n	8003f5e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d11c      	bne.n	8003ee8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 fd9f 	bl	8004a00 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	492a      	ldr	r1, [pc, #168]	; (8003f78 <HAL_TIM_IC_ConfigChannel+0x138>)
 8003ece:	400a      	ands	r2, r1
 8003ed0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6999      	ldr	r1, [r3, #24]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	021a      	lsls	r2, r3, #8
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	619a      	str	r2, [r3, #24]
 8003ee6:	e03a      	b.n	8003f5e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11b      	bne.n	8003f26 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f000 fdf3 	bl	8004ae8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	210c      	movs	r1, #12
 8003f0e:	438a      	bics	r2, r1
 8003f10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	61da      	str	r2, [r3, #28]
 8003f24:	e01b      	b.n	8003f5e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f000 fe17 	bl	8004b68 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <HAL_TIM_IC_ConfigChannel+0x138>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69d9      	ldr	r1, [r3, #28]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	021a      	lsls	r2, r3, #8
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	223d      	movs	r2, #61	; 0x3d
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	223c      	movs	r2, #60	; 0x3c
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b004      	add	sp, #16
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	fffff3ff 	.word	0xfffff3ff

08003f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	223c      	movs	r2, #60	; 0x3c
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0a4      	b.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	223c      	movs	r2, #60	; 0x3c
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	223d      	movs	r2, #61	; 0x3d
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d029      	beq.n	8004000 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003fac:	d802      	bhi.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003fb2:	e08c      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d046      	beq.n	8004046 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d065      	beq.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8003fbc:	e087      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	0011      	movs	r1, r2
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 fa32 	bl	8004430 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2108      	movs	r1, #8
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	438a      	bics	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6999      	ldr	r1, [r3, #24]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	619a      	str	r2, [r3, #24]
      break;
 8003ffe:	e066      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	0011      	movs	r1, r2
 8004008:	0018      	movs	r0, r3
 800400a:	f000 fa8f 	bl	800452c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2180      	movs	r1, #128	; 0x80
 800401a:	0109      	lsls	r1, r1, #4
 800401c:	430a      	orrs	r2, r1
 800401e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	492f      	ldr	r1, [pc, #188]	; (80040e8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800402c:	400a      	ands	r2, r1
 800402e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6999      	ldr	r1, [r3, #24]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	021a      	lsls	r2, r3, #8
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
      break;
 8004044:	e043      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f000 faea 	bl	8004628 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2108      	movs	r1, #8
 8004060:	430a      	orrs	r2, r1
 8004062:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2104      	movs	r1, #4
 8004070:	438a      	bics	r2, r1
 8004072:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69d9      	ldr	r1, [r3, #28]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	61da      	str	r2, [r3, #28]
      break;
 8004086:	e022      	b.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	0011      	movs	r1, r2
 8004090:	0018      	movs	r0, r3
 8004092:	f000 fb49 	bl	8004728 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	0109      	lsls	r1, r1, #4
 80040a4:	430a      	orrs	r2, r1
 80040a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	490d      	ldr	r1, [pc, #52]	; (80040e8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69d9      	ldr	r1, [r3, #28]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	61da      	str	r2, [r3, #28]
      break;
 80040cc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	223d      	movs	r2, #61	; 0x3d
 80040d2:	2101      	movs	r1, #1
 80040d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	223c      	movs	r2, #60	; 0x3c
 80040da:	2100      	movs	r1, #0
 80040dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b004      	add	sp, #16
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	fffffbff 	.word	0xfffffbff

080040ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	223c      	movs	r2, #60	; 0x3c
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_ConfigClockSource+0x18>
 8004100:	2302      	movs	r3, #2
 8004102:	e0ab      	b.n	800425c <HAL_TIM_ConfigClockSource+0x170>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	223c      	movs	r2, #60	; 0x3c
 8004108:	2101      	movs	r1, #1
 800410a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	223d      	movs	r2, #61	; 0x3d
 8004110:	2102      	movs	r1, #2
 8004112:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2277      	movs	r2, #119	; 0x77
 8004120:	4393      	bics	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a4f      	ldr	r2, [pc, #316]	; (8004264 <HAL_TIM_ConfigClockSource+0x178>)
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d100      	bne.n	800413e <HAL_TIM_ConfigClockSource+0x52>
 800413c:	e06b      	b.n	8004216 <HAL_TIM_ConfigClockSource+0x12a>
 800413e:	d80e      	bhi.n	800415e <HAL_TIM_ConfigClockSource+0x72>
 8004140:	2b10      	cmp	r3, #16
 8004142:	d100      	bne.n	8004146 <HAL_TIM_ConfigClockSource+0x5a>
 8004144:	e077      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x14a>
 8004146:	d803      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x64>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d100      	bne.n	800414e <HAL_TIM_ConfigClockSource+0x62>
 800414c:	e073      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800414e:	e07c      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004150:	2b20      	cmp	r3, #32
 8004152:	d100      	bne.n	8004156 <HAL_TIM_ConfigClockSource+0x6a>
 8004154:	e06f      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x14a>
 8004156:	2b30      	cmp	r3, #48	; 0x30
 8004158:	d100      	bne.n	800415c <HAL_TIM_ConfigClockSource+0x70>
 800415a:	e06c      	b.n	8004236 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800415c:	e075      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800415e:	2b70      	cmp	r3, #112	; 0x70
 8004160:	d00e      	beq.n	8004180 <HAL_TIM_ConfigClockSource+0x94>
 8004162:	d804      	bhi.n	800416e <HAL_TIM_ConfigClockSource+0x82>
 8004164:	2b50      	cmp	r3, #80	; 0x50
 8004166:	d036      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0xea>
 8004168:	2b60      	cmp	r3, #96	; 0x60
 800416a:	d044      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800416c:	e06d      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	0152      	lsls	r2, r2, #5
 8004172:	4293      	cmp	r3, r2
 8004174:	d068      	beq.n	8004248 <HAL_TIM_ConfigClockSource+0x15c>
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	0192      	lsls	r2, r2, #6
 800417a:	4293      	cmp	r3, r2
 800417c:	d017      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800417e:	e064      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f000 fd4a 	bl	8004c28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2277      	movs	r2, #119	; 0x77
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
      break;
 80041ac:	e04d      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f000 fd33 	bl	8004c28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	01c9      	lsls	r1, r1, #7
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
      break;
 80041d4:	e039      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	001a      	movs	r2, r3
 80041e4:	f000 fbde 	bl	80049a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2150      	movs	r1, #80	; 0x50
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 fd00 	bl	8004bf4 <TIM_ITRx_SetConfig>
      break;
 80041f4:	e029      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	001a      	movs	r2, r3
 8004204:	f000 fc3e 	bl	8004a84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2160      	movs	r1, #96	; 0x60
 800420e:	0018      	movs	r0, r3
 8004210:	f000 fcf0 	bl	8004bf4 <TIM_ITRx_SetConfig>
      break;
 8004214:	e019      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	001a      	movs	r2, r3
 8004224:	f000 fbbe 	bl	80049a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	0018      	movs	r0, r3
 8004230:	f000 fce0 	bl	8004bf4 <TIM_ITRx_SetConfig>
      break;
 8004234:	e009      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	0019      	movs	r1, r3
 8004240:	0010      	movs	r0, r2
 8004242:	f000 fcd7 	bl	8004bf4 <TIM_ITRx_SetConfig>
      break;
 8004246:	e000      	b.n	800424a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004248:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	223d      	movs	r2, #61	; 0x3d
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	223c      	movs	r2, #60	; 0x3c
 8004256:	2100      	movs	r1, #0
 8004258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b004      	add	sp, #16
 8004262:	bd80      	pop	{r7, pc}
 8004264:	ffff00ff 	.word	0xffff00ff

08004268 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	223c      	movs	r2, #60	; 0x3c
 8004276:	5c9b      	ldrb	r3, [r3, r2]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_TIM_SlaveConfigSynchro+0x18>
 800427c:	2302      	movs	r3, #2
 800427e:	e032      	b.n	80042e6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	223c      	movs	r2, #60	; 0x3c
 8004284:	2101      	movs	r1, #1
 8004286:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	223d      	movs	r2, #61	; 0x3d
 800428c:	2102      	movs	r1, #2
 800428e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0011      	movs	r1, r2
 8004296:	0018      	movs	r0, r3
 8004298:	f000 faaa 	bl	80047f0 <TIM_SlaveTimer_SetConfig>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d009      	beq.n	80042b4 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	223d      	movs	r2, #61	; 0x3d
 80042a4:	2101      	movs	r1, #1
 80042a6:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223c      	movs	r2, #60	; 0x3c
 80042ac:	2100      	movs	r1, #0
 80042ae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e018      	b.n	80042e6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2140      	movs	r1, #64	; 0x40
 80042c0:	438a      	bics	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4908      	ldr	r1, [pc, #32]	; (80042f0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	223d      	movs	r2, #61	; 0x3d
 80042d8:	2101      	movs	r1, #1
 80042da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	223c      	movs	r2, #60	; 0x3c
 80042e0:	2100      	movs	r1, #0
 80042e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b002      	add	sp, #8
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	ffffbfff 	.word	0xffffbfff

080042f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	46bd      	mov	sp, r7
 8004300:	b002      	add	sp, #8
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	b002      	add	sp, #8
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	b002      	add	sp, #8
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}

08004344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a30      	ldr	r2, [pc, #192]	; (8004418 <TIM_Base_SetConfig+0xd4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d008      	beq.n	800436e <TIM_Base_SetConfig+0x2a>
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	05db      	lsls	r3, r3, #23
 8004362:	429a      	cmp	r2, r3
 8004364:	d003      	beq.n	800436e <TIM_Base_SetConfig+0x2a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2c      	ldr	r2, [pc, #176]	; (800441c <TIM_Base_SetConfig+0xd8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d108      	bne.n	8004380 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2270      	movs	r2, #112	; 0x70
 8004372:	4393      	bics	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <TIM_Base_SetConfig+0xd4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d014      	beq.n	80043b2 <TIM_Base_SetConfig+0x6e>
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	05db      	lsls	r3, r3, #23
 800438e:	429a      	cmp	r2, r3
 8004390:	d00f      	beq.n	80043b2 <TIM_Base_SetConfig+0x6e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a21      	ldr	r2, [pc, #132]	; (800441c <TIM_Base_SetConfig+0xd8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x6e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a20      	ldr	r2, [pc, #128]	; (8004420 <TIM_Base_SetConfig+0xdc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x6e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <TIM_Base_SetConfig+0xe0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x6e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <TIM_Base_SetConfig+0xe4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <TIM_Base_SetConfig+0xe8>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	4393      	bics	r3, r2
 80043ca:	001a      	movs	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <TIM_Base_SetConfig+0xd4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_Base_SetConfig+0xbe>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <TIM_Base_SetConfig+0xe0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_Base_SetConfig+0xbe>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <TIM_Base_SetConfig+0xe4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d103      	bne.n	800440a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	615a      	str	r2, [r3, #20]
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40002000 	.word	0x40002000
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800
 800442c:	fffffcff 	.word	0xfffffcff

08004430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	2201      	movs	r2, #1
 8004440:	4393      	bics	r3, r2
 8004442:	001a      	movs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2270      	movs	r2, #112	; 0x70
 800445e:	4393      	bics	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2203      	movs	r2, #3
 8004466:	4393      	bics	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2202      	movs	r2, #2
 8004478:	4393      	bics	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <TIM_OC1_SetConfig+0xe8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_OC1_SetConfig+0x6e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <TIM_OC1_SetConfig+0xec>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_OC1_SetConfig+0x6e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a21      	ldr	r2, [pc, #132]	; (8004520 <TIM_OC1_SetConfig+0xf0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2208      	movs	r2, #8
 80044a2:	4393      	bics	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2204      	movs	r2, #4
 80044b4:	4393      	bics	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a17      	ldr	r2, [pc, #92]	; (8004518 <TIM_OC1_SetConfig+0xe8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d007      	beq.n	80044d0 <TIM_OC1_SetConfig+0xa0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a16      	ldr	r2, [pc, #88]	; (800451c <TIM_OC1_SetConfig+0xec>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_OC1_SetConfig+0xa0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC1_SetConfig+0xf0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4a14      	ldr	r2, [pc, #80]	; (8004524 <TIM_OC1_SetConfig+0xf4>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4a13      	ldr	r2, [pc, #76]	; (8004528 <TIM_OC1_SetConfig+0xf8>)
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	46bd      	mov	sp, r7
 8004512:	b006      	add	sp, #24
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800
 8004524:	fffffeff 	.word	0xfffffeff
 8004528:	fffffdff 	.word	0xfffffdff

0800452c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	2210      	movs	r2, #16
 800453c:	4393      	bics	r3, r2
 800453e:	001a      	movs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a2c      	ldr	r2, [pc, #176]	; (800460c <TIM_OC2_SetConfig+0xe0>)
 800455a:	4013      	ands	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a2b      	ldr	r2, [pc, #172]	; (8004610 <TIM_OC2_SetConfig+0xe4>)
 8004562:	4013      	ands	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2220      	movs	r2, #32
 8004576:	4393      	bics	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a22      	ldr	r2, [pc, #136]	; (8004614 <TIM_OC2_SetConfig+0xe8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10d      	bne.n	80045aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2280      	movs	r2, #128	; 0x80
 8004592:	4393      	bics	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2240      	movs	r2, #64	; 0x40
 80045a6:	4393      	bics	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <TIM_OC2_SetConfig+0xe8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_OC2_SetConfig+0x96>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <TIM_OC2_SetConfig+0xec>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC2_SetConfig+0x96>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a17      	ldr	r2, [pc, #92]	; (800461c <TIM_OC2_SetConfig+0xf0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d113      	bne.n	80045ea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <TIM_OC2_SetConfig+0xf4>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4a15      	ldr	r2, [pc, #84]	; (8004624 <TIM_OC2_SetConfig+0xf8>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	46bd      	mov	sp, r7
 8004608:	b006      	add	sp, #24
 800460a:	bd80      	pop	{r7, pc}
 800460c:	ffff8fff 	.word	0xffff8fff
 8004610:	fffffcff 	.word	0xfffffcff
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800
 8004620:	fffffbff 	.word	0xfffffbff
 8004624:	fffff7ff 	.word	0xfffff7ff

08004628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4a33      	ldr	r2, [pc, #204]	; (8004704 <TIM_OC3_SetConfig+0xdc>)
 8004638:	401a      	ands	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2270      	movs	r2, #112	; 0x70
 8004654:	4393      	bics	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2203      	movs	r2, #3
 800465c:	4393      	bics	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <TIM_OC3_SetConfig+0xe0>)
 800466e:	4013      	ands	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a22      	ldr	r2, [pc, #136]	; (800470c <TIM_OC3_SetConfig+0xe4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d10d      	bne.n	80046a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4a21      	ldr	r2, [pc, #132]	; (8004710 <TIM_OC3_SetConfig+0xe8>)
 800468a:	4013      	ands	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	4a1d      	ldr	r2, [pc, #116]	; (8004714 <TIM_OC3_SetConfig+0xec>)
 800469e:	4013      	ands	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a19      	ldr	r2, [pc, #100]	; (800470c <TIM_OC3_SetConfig+0xe4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_OC3_SetConfig+0x92>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1a      	ldr	r2, [pc, #104]	; (8004718 <TIM_OC3_SetConfig+0xf0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_OC3_SetConfig+0x92>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <TIM_OC3_SetConfig+0xf4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d113      	bne.n	80046e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <TIM_OC3_SetConfig+0xf8>)
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <TIM_OC3_SetConfig+0xfc>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	46c0      	nop			; (mov r8, r8)
 80046fe:	46bd      	mov	sp, r7
 8004700:	b006      	add	sp, #24
 8004702:	bd80      	pop	{r7, pc}
 8004704:	fffffeff 	.word	0xfffffeff
 8004708:	fffffdff 	.word	0xfffffdff
 800470c:	40012c00 	.word	0x40012c00
 8004710:	fffff7ff 	.word	0xfffff7ff
 8004714:	fffffbff 	.word	0xfffffbff
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800
 8004720:	ffffefff 	.word	0xffffefff
 8004724:	ffffdfff 	.word	0xffffdfff

08004728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <TIM_OC4_SetConfig+0xa8>)
 8004738:	401a      	ands	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <TIM_OC4_SetConfig+0xac>)
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <TIM_OC4_SetConfig+0xb0>)
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <TIM_OC4_SetConfig+0xb4>)
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	031b      	lsls	r3, r3, #12
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <TIM_OC4_SetConfig+0xb8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d007      	beq.n	8004798 <TIM_OC4_SetConfig+0x70>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <TIM_OC4_SetConfig+0xbc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_OC4_SetConfig+0x70>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <TIM_OC4_SetConfig+0xc0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d109      	bne.n	80047ac <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4a14      	ldr	r2, [pc, #80]	; (80047ec <TIM_OC4_SetConfig+0xc4>)
 800479c:	4013      	ands	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b006      	add	sp, #24
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	ffffefff 	.word	0xffffefff
 80047d4:	ffff8fff 	.word	0xffff8fff
 80047d8:	fffffcff 	.word	0xfffffcff
 80047dc:	ffffdfff 	.word	0xffffdfff
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40014400 	.word	0x40014400
 80047e8:	40014800 	.word	0x40014800
 80047ec:	ffffbfff 	.word	0xffffbfff

080047f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2270      	movs	r2, #112	; 0x70
 8004806:	4393      	bics	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2207      	movs	r2, #7
 8004818:	4393      	bics	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b30      	cmp	r3, #48	; 0x30
 8004834:	d05a      	beq.n	80048ec <TIM_SlaveTimer_SetConfig+0xfc>
 8004836:	d806      	bhi.n	8004846 <TIM_SlaveTimer_SetConfig+0x56>
 8004838:	2b10      	cmp	r3, #16
 800483a:	d057      	beq.n	80048ec <TIM_SlaveTimer_SetConfig+0xfc>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d055      	beq.n	80048ec <TIM_SlaveTimer_SetConfig+0xfc>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d053      	beq.n	80048ec <TIM_SlaveTimer_SetConfig+0xfc>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004844:	e053      	b.n	80048ee <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8004846:	2b50      	cmp	r3, #80	; 0x50
 8004848:	d03c      	beq.n	80048c4 <TIM_SlaveTimer_SetConfig+0xd4>
 800484a:	d802      	bhi.n	8004852 <TIM_SlaveTimer_SetConfig+0x62>
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d010      	beq.n	8004872 <TIM_SlaveTimer_SetConfig+0x82>
      break;
 8004850:	e04d      	b.n	80048ee <TIM_SlaveTimer_SetConfig+0xfe>
  switch (sSlaveConfig->InputTrigger)
 8004852:	2b60      	cmp	r3, #96	; 0x60
 8004854:	d040      	beq.n	80048d8 <TIM_SlaveTimer_SetConfig+0xe8>
 8004856:	2b70      	cmp	r3, #112	; 0x70
 8004858:	d000      	beq.n	800485c <TIM_SlaveTimer_SetConfig+0x6c>
      break;
 800485a:	e048      	b.n	80048ee <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_ETR_SetConfig(htim->Instance,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68d9      	ldr	r1, [r3, #12]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f000 f9dc 	bl	8004c28 <TIM_ETR_SetConfig>
      break;
 8004870:	e03d      	b.n	80048ee <TIM_SlaveTimer_SetConfig+0xfe>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b05      	cmp	r3, #5
 8004878:	d101      	bne.n	800487e <TIM_SlaveTimer_SetConfig+0x8e>
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e038      	b.n	80048f0 <TIM_SlaveTimer_SetConfig+0x100>
      tmpccer = htim->Instance->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a1a      	ldr	r2, [r3, #32]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2101      	movs	r1, #1
 8004892:	438a      	bics	r2, r1
 8004894:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	22f0      	movs	r2, #240	; 0xf0
 80048a2:	4393      	bics	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	621a      	str	r2, [r3, #32]
      break;
 80048c2:	e014      	b.n	80048ee <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	6899      	ldr	r1, [r3, #8]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	001a      	movs	r2, r3
 80048d2:	f000 f867 	bl	80049a4 <TIM_TI1_ConfigInputStage>
      break;
 80048d6:	e00a      	b.n	80048ee <TIM_SlaveTimer_SetConfig+0xfe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	001a      	movs	r2, r3
 80048e6:	f000 f8cd 	bl	8004a84 <TIM_TI2_ConfigInputStage>
      break;
 80048ea:	e000      	b.n	80048ee <TIM_SlaveTimer_SetConfig+0xfe>
      break;
 80048ec:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b006      	add	sp, #24
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	2201      	movs	r2, #1
 800490c:	4393      	bics	r3, r2
 800490e:	001a      	movs	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a1e      	ldr	r2, [pc, #120]	; (800499c <TIM_TI1_SetConfig+0xa4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d008      	beq.n	800493a <TIM_TI1_SetConfig+0x42>
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	05db      	lsls	r3, r3, #23
 800492e:	429a      	cmp	r2, r3
 8004930:	d003      	beq.n	800493a <TIM_TI1_SetConfig+0x42>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <TIM_TI1_SetConfig+0xa8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <TIM_TI1_SetConfig+0x46>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <TIM_TI1_SetConfig+0x48>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2203      	movs	r2, #3
 8004948:	4393      	bics	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e003      	b.n	800495e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2201      	movs	r2, #1
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	22f0      	movs	r2, #240	; 0xf0
 8004962:	4393      	bics	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	22ff      	movs	r2, #255	; 0xff
 800496c:	4013      	ands	r3, r2
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	220a      	movs	r2, #10
 8004978:	4393      	bics	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	220a      	movs	r2, #10
 8004980:	4013      	ands	r3, r2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	46c0      	nop			; (mov r8, r8)
 8004996:	46bd      	mov	sp, r7
 8004998:	b006      	add	sp, #24
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40000400 	.word	0x40000400

080049a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	2201      	movs	r2, #1
 80049bc:	4393      	bics	r3, r2
 80049be:	001a      	movs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	22f0      	movs	r2, #240	; 0xf0
 80049ce:	4393      	bics	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	220a      	movs	r2, #10
 80049e0:	4393      	bics	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	621a      	str	r2, [r3, #32]
}
 80049f8:	46c0      	nop			; (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b006      	add	sp, #24
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	2210      	movs	r2, #16
 8004a14:	4393      	bics	r3, r2
 8004a16:	001a      	movs	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	4a14      	ldr	r2, [pc, #80]	; (8004a7c <TIM_TI2_SetConfig+0x7c>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <TIM_TI2_SetConfig+0x80>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	22a0      	movs	r2, #160	; 0xa0
 8004a54:	4393      	bics	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	22a0      	movs	r2, #160	; 0xa0
 8004a5e:	4013      	ands	r3, r2
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b006      	add	sp, #24
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	fffffcff 	.word	0xfffffcff
 8004a80:	ffff0fff 	.word	0xffff0fff

08004a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	2210      	movs	r2, #16
 8004a96:	4393      	bics	r3, r2
 8004a98:	001a      	movs	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <TIM_TI2_ConfigInputStage+0x60>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	031b      	lsls	r3, r3, #12
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	22a0      	movs	r2, #160	; 0xa0
 8004ac0:	4393      	bics	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b006      	add	sp, #24
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	ffff0fff 	.word	0xffff0fff

08004ae8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	4a19      	ldr	r2, [pc, #100]	; (8004b60 <TIM_TI3_SetConfig+0x78>)
 8004afc:	401a      	ands	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2203      	movs	r2, #3
 8004b12:	4393      	bics	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	22f0      	movs	r2, #240	; 0xf0
 8004b22:	4393      	bics	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	22ff      	movs	r2, #255	; 0xff
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <TIM_TI3_SetConfig+0x7c>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	021a      	lsls	r2, r3, #8
 8004b40:	23a0      	movs	r3, #160	; 0xa0
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4013      	ands	r3, r2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b006      	add	sp, #24
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	fffffeff 	.word	0xfffffeff
 8004b64:	fffff5ff 	.word	0xfffff5ff

08004b68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	4a1a      	ldr	r2, [pc, #104]	; (8004be4 <TIM_TI4_SetConfig+0x7c>)
 8004b7c:	401a      	ands	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_TI4_SetConfig+0x80>)
 8004b92:	4013      	ands	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4a12      	ldr	r2, [pc, #72]	; (8004bec <TIM_TI4_SetConfig+0x84>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	031b      	lsls	r3, r3, #12
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <TIM_TI4_SetConfig+0x88>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	031a      	lsls	r2, r3, #12
 8004bc2:	23a0      	movs	r3, #160	; 0xa0
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b006      	add	sp, #24
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	ffffefff 	.word	0xffffefff
 8004be8:	fffffcff 	.word	0xfffffcff
 8004bec:	ffff0fff 	.word	0xffff0fff
 8004bf0:	ffff5fff 	.word	0xffff5fff

08004bf4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2270      	movs	r2, #112	; 0x70
 8004c08:	4393      	bics	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	2207      	movs	r2, #7
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	609a      	str	r2, [r3, #8]
}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b004      	add	sp, #16
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <TIM_ETR_SetConfig+0x3c>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b006      	add	sp, #24
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	ffff00ff 	.word	0xffff00ff

08004c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	221f      	movs	r2, #31
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	0013      	movs	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	43d2      	mvns	r2, r2
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1a      	ldr	r2, [r3, #32]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	211f      	movs	r1, #31
 8004c98:	400b      	ands	r3, r1
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4099      	lsls	r1, r3
 8004c9e:	000b      	movs	r3, r1
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b006      	add	sp, #24
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223c      	movs	r2, #60	; 0x3c
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e042      	b.n	8004d4e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	223c      	movs	r2, #60	; 0x3c
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	223d      	movs	r2, #61	; 0x3d
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2270      	movs	r2, #112	; 0x70
 8004cec:	4393      	bics	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00a      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	2380      	movs	r3, #128	; 0x80
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d004      	beq.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10c      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2280      	movs	r2, #128	; 0x80
 8004d26:	4393      	bics	r3, r2
 8004d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	223d      	movs	r2, #61	; 0x3d
 8004d40:	2101      	movs	r1, #1
 8004d42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	223c      	movs	r2, #60	; 0x3c
 8004d48:	2100      	movs	r1, #0
 8004d4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b004      	add	sp, #16
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40000400 	.word	0x40000400

08004d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b002      	add	sp, #8
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e044      	b.n	8004e1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2270      	movs	r2, #112	; 0x70
 8004d9e:	2100      	movs	r1, #0
 8004da0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f7fc fd5f 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2101      	movs	r1, #1
 8004dbc:	438a      	bics	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f000 fa24 	bl	8005210 <UART_SetConfig>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e024      	b.n	8004e1c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f000 fb85 	bl	80054ec <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	490d      	ldr	r1, [pc, #52]	; (8004e24 <HAL_UART_Init+0xa4>)
 8004dee:	400a      	ands	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	212a      	movs	r1, #42	; 0x2a
 8004dfe:	438a      	bics	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 fc1d 	bl	8005654 <UART_CheckIdleState>
 8004e1a:	0003      	movs	r3, r0
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b002      	add	sp, #8
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	ffffb7ff 	.word	0xffffb7ff

08004e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	1dbb      	adds	r3, r7, #6
 8004e36:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d000      	beq.n	8004e42 <HAL_UART_Transmit+0x1a>
 8004e40:	e095      	b.n	8004f6e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_UART_Transmit+0x28>
 8004e48:	1dbb      	adds	r3, r7, #6
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e08d      	b.n	8004f70 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	015b      	lsls	r3, r3, #5
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d109      	bne.n	8004e74 <HAL_UART_Transmit+0x4c>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d001      	beq.n	8004e74 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e07d      	b.n	8004f70 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2270      	movs	r2, #112	; 0x70
 8004e78:	5c9b      	ldrb	r3, [r3, r2]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Transmit+0x5a>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e076      	b.n	8004f70 <HAL_UART_Transmit+0x148>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2270      	movs	r2, #112	; 0x70
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2221      	movs	r2, #33	; 0x21
 8004e94:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004e96:	f7fc feb3 	bl	8001c00 <HAL_GetTick>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1dba      	adds	r2, r7, #6
 8004ea2:	2150      	movs	r1, #80	; 0x50
 8004ea4:	8812      	ldrh	r2, [r2, #0]
 8004ea6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1dba      	adds	r2, r7, #6
 8004eac:	2152      	movs	r1, #82	; 0x52
 8004eae:	8812      	ldrh	r2, [r2, #0]
 8004eb0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	015b      	lsls	r3, r3, #5
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d108      	bne.n	8004ed0 <HAL_UART_Transmit+0xa8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	e003      	b.n	8004ed8 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ed8:	e02d      	b.n	8004f36 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	0013      	movs	r3, r2
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	f000 fbfa 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8004eec:	1e03      	subs	r3, r0, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e03d      	b.n	8004f70 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	881a      	ldrh	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	05d2      	lsls	r2, r2, #23
 8004f04:	0dd2      	lsrs	r2, r2, #23
 8004f06:	b292      	uxth	r2, r2
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e008      	b.n	8004f24 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	781a      	ldrb	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	b292      	uxth	r2, r2
 8004f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2252      	movs	r2, #82	; 0x52
 8004f28:	5a9b      	ldrh	r3, [r3, r2]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b299      	uxth	r1, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2252      	movs	r2, #82	; 0x52
 8004f34:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2252      	movs	r2, #82	; 0x52
 8004f3a:	5a9b      	ldrh	r3, [r3, r2]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1cb      	bne.n	8004eda <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	0013      	movs	r3, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2140      	movs	r1, #64	; 0x40
 8004f50:	f000 fbc6 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8004f54:	1e03      	subs	r3, r0, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e009      	b.n	8004f70 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2270      	movs	r2, #112	; 0x70
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b008      	add	sp, #32
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4a93      	ldr	r2, [pc, #588]	; (80051e8 <HAL_UART_IRQHandler+0x270>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d112      	bne.n	8004fcc <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	4013      	ands	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d00a      	beq.n	8004fcc <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d100      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x48>
 8004fbe:	e10b      	b.n	80051d8 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	4798      	blx	r3
      }
      return;
 8004fca:	e105      	b.n	80051d8 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d100      	bne.n	8004fd4 <HAL_UART_IRQHandler+0x5c>
 8004fd2:	e0cd      	b.n	8005170 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d105      	bne.n	8004fe8 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	2390      	movs	r3, #144	; 0x90
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d100      	bne.n	8004fe8 <HAL_UART_IRQHandler+0x70>
 8004fe6:	e0c3      	b.n	8005170 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2201      	movs	r2, #1
 8004fec:	4013      	ands	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_UART_IRQHandler+0x96>
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2201      	movs	r2, #1
 8005000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005006:	2201      	movs	r2, #1
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2202      	movs	r2, #2
 8005012:	4013      	ands	r3, r2
 8005014:	d00d      	beq.n	8005032 <HAL_UART_IRQHandler+0xba>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2201      	movs	r2, #1
 800501a:	4013      	ands	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2202      	movs	r2, #2
 8005024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	2204      	movs	r2, #4
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	2204      	movs	r2, #4
 8005036:	4013      	ands	r3, r2
 8005038:	d00d      	beq.n	8005056 <HAL_UART_IRQHandler+0xde>
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2204      	movs	r2, #4
 8005048:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	2202      	movs	r2, #2
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2208      	movs	r2, #8
 800505a:	4013      	ands	r3, r2
 800505c:	d011      	beq.n	8005082 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2220      	movs	r2, #32
 8005062:	4013      	ands	r3, r2
 8005064:	d103      	bne.n	800506e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2201      	movs	r2, #1
 800506a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800506c:	d009      	beq.n	8005082 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2208      	movs	r2, #8
 8005074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507a:	2208      	movs	r2, #8
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	4013      	ands	r3, r2
 800508a:	d00f      	beq.n	80050ac <HAL_UART_IRQHandler+0x134>
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	04db      	lsls	r3, r3, #19
 8005092:	4013      	ands	r3, r2
 8005094:	d00a      	beq.n	80050ac <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	0112      	lsls	r2, r2, #4
 800509e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a4:	2220      	movs	r2, #32
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d100      	bne.n	80050b6 <HAL_UART_IRQHandler+0x13e>
 80050b4:	e092      	b.n	80051dc <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2220      	movs	r2, #32
 80050ba:	4013      	ands	r3, r2
 80050bc:	d00c      	beq.n	80050d8 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2220      	movs	r2, #32
 80050c2:	4013      	ands	r3, r2
 80050c4:	d008      	beq.n	80050d8 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	0010      	movs	r0, r2
 80050d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2240      	movs	r2, #64	; 0x40
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d003      	beq.n	80050f4 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2228      	movs	r2, #40	; 0x28
 80050f0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050f2:	d033      	beq.n	800515c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 fb70 	bl	80057dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2240      	movs	r2, #64	; 0x40
 8005104:	4013      	ands	r3, r2
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d123      	bne.n	8005152 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2140      	movs	r1, #64	; 0x40
 8005116:	438a      	bics	r2, r1
 8005118:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d012      	beq.n	8005148 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005126:	4a31      	ldr	r2, [pc, #196]	; (80051ec <HAL_UART_IRQHandler+0x274>)
 8005128:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512e:	0018      	movs	r0, r3
 8005130:	f7fc feb8 	bl	8001ea4 <HAL_DMA_Abort_IT>
 8005134:	1e03      	subs	r3, r0, #0
 8005136:	d019      	beq.n	800516c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800513c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005142:	0018      	movs	r0, r3
 8005144:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005146:	e011      	b.n	800516c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	0018      	movs	r0, r3
 800514c:	f000 f858 	bl	8005200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	e00c      	b.n	800516c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f000 f853 	bl	8005200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515a:	e007      	b.n	800516c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f000 f84e 	bl	8005200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800516a:	e037      	b.n	80051dc <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	46c0      	nop			; (mov r8, r8)
    return;
 800516e:	e035      	b.n	80051dc <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	035b      	lsls	r3, r3, #13
 8005176:	4013      	ands	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_UART_IRQHandler+0x220>
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	03db      	lsls	r3, r3, #15
 8005180:	4013      	ands	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	0352      	lsls	r2, r2, #13
 800518c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	0018      	movs	r0, r3
 8005192:	f000 fb74 	bl	800587e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005196:	e024      	b.n	80051e2 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2280      	movs	r2, #128	; 0x80
 800519c:	4013      	ands	r3, r2
 800519e:	d00d      	beq.n	80051bc <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2280      	movs	r2, #128	; 0x80
 80051a4:	4013      	ands	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d017      	beq.n	80051e0 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	0010      	movs	r0, r2
 80051b8:	4798      	blx	r3
    }
    return;
 80051ba:	e011      	b.n	80051e0 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_UART_IRQHandler+0x26a>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2240      	movs	r2, #64	; 0x40
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00a      	beq.n	80051e2 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	0018      	movs	r0, r3
 80051d0:	f000 fb3b 	bl	800584a <UART_EndTransmit_IT>
    return;
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	e004      	b.n	80051e2 <HAL_UART_IRQHandler+0x26a>
      return;
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	e002      	b.n	80051e2 <HAL_UART_IRQHandler+0x26a>
    return;
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	e000      	b.n	80051e2 <HAL_UART_IRQHandler+0x26a>
    return;
 80051e0:	46c0      	nop			; (mov r8, r8)
  }

}
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b008      	add	sp, #32
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	0000080f 	.word	0x0000080f
 80051ec:	0800581d 	.word	0x0800581d

080051f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800521c:	2317      	movs	r3, #23
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4aa3      	ldr	r2, [pc, #652]	; (80054d0 <UART_SetConfig+0x2c0>)
 8005244:	4013      	ands	r3, r2
 8005246:	0019      	movs	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	430a      	orrs	r2, r1
 8005250:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a9e      	ldr	r2, [pc, #632]	; (80054d4 <UART_SetConfig+0x2c4>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a95      	ldr	r2, [pc, #596]	; (80054d8 <UART_SetConfig+0x2c8>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005290:	4b92      	ldr	r3, [pc, #584]	; (80054dc <UART_SetConfig+0x2cc>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	2203      	movs	r2, #3
 8005296:	4013      	ands	r3, r2
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00f      	beq.n	80052bc <UART_SetConfig+0xac>
 800529c:	d304      	bcc.n	80052a8 <UART_SetConfig+0x98>
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d011      	beq.n	80052c6 <UART_SetConfig+0xb6>
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d005      	beq.n	80052b2 <UART_SetConfig+0xa2>
 80052a6:	e013      	b.n	80052d0 <UART_SetConfig+0xc0>
 80052a8:	231f      	movs	r3, #31
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e012      	b.n	80052d8 <UART_SetConfig+0xc8>
 80052b2:	231f      	movs	r3, #31
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	2202      	movs	r2, #2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e00d      	b.n	80052d8 <UART_SetConfig+0xc8>
 80052bc:	231f      	movs	r3, #31
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	2204      	movs	r2, #4
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e008      	b.n	80052d8 <UART_SetConfig+0xc8>
 80052c6:	231f      	movs	r3, #31
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	2208      	movs	r2, #8
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e003      	b.n	80052d8 <UART_SetConfig+0xc8>
 80052d0:	231f      	movs	r3, #31
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2210      	movs	r2, #16
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d000      	beq.n	80052e8 <UART_SetConfig+0xd8>
 80052e6:	e07d      	b.n	80053e4 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 80052e8:	231f      	movs	r3, #31
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d01c      	beq.n	800532c <UART_SetConfig+0x11c>
 80052f2:	dc02      	bgt.n	80052fa <UART_SetConfig+0xea>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <UART_SetConfig+0xf4>
 80052f8:	e04b      	b.n	8005392 <UART_SetConfig+0x182>
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d025      	beq.n	800534a <UART_SetConfig+0x13a>
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d037      	beq.n	8005372 <UART_SetConfig+0x162>
 8005302:	e046      	b.n	8005392 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005304:	f7fe f92a 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8005308:	0003      	movs	r3, r0
 800530a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	005a      	lsls	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	18d2      	adds	r2, r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	0019      	movs	r1, r3
 800531e:	0010      	movs	r0, r2
 8005320:	f7fa fefa 	bl	8000118 <__udivsi3>
 8005324:	0003      	movs	r3, r0
 8005326:	b29b      	uxth	r3, r3
 8005328:	61bb      	str	r3, [r7, #24]
        break;
 800532a:	e037      	b.n	800539c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	4a6b      	ldr	r2, [pc, #428]	; (80054e0 <UART_SetConfig+0x2d0>)
 8005334:	189a      	adds	r2, r3, r2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	0019      	movs	r1, r3
 800533c:	0010      	movs	r0, r2
 800533e:	f7fa feeb 	bl	8000118 <__udivsi3>
 8005342:	0003      	movs	r3, r0
 8005344:	b29b      	uxth	r3, r3
 8005346:	61bb      	str	r3, [r7, #24]
        break;
 8005348:	e028      	b.n	800539c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534a:	f7fe f899 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800534e:	0003      	movs	r3, r0
 8005350:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	005a      	lsls	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	18d2      	adds	r2, r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	0019      	movs	r1, r3
 8005364:	0010      	movs	r0, r2
 8005366:	f7fa fed7 	bl	8000118 <__udivsi3>
 800536a:	0003      	movs	r3, r0
 800536c:	b29b      	uxth	r3, r3
 800536e:	61bb      	str	r3, [r7, #24]
        break;
 8005370:	e014      	b.n	800539c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	2280      	movs	r2, #128	; 0x80
 800537a:	0252      	lsls	r2, r2, #9
 800537c:	189a      	adds	r2, r3, r2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	0019      	movs	r1, r3
 8005384:	0010      	movs	r0, r2
 8005386:	f7fa fec7 	bl	8000118 <__udivsi3>
 800538a:	0003      	movs	r3, r0
 800538c:	b29b      	uxth	r3, r3
 800538e:	61bb      	str	r3, [r7, #24]
        break;
 8005390:	e004      	b.n	800539c <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 8005392:	2317      	movs	r3, #23
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	2201      	movs	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
        break;
 800539a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d91b      	bls.n	80053da <UART_SetConfig+0x1ca>
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4a4f      	ldr	r2, [pc, #316]	; (80054e4 <UART_SetConfig+0x2d4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d817      	bhi.n	80053da <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	200a      	movs	r0, #10
 80053b0:	183b      	adds	r3, r7, r0
 80053b2:	210f      	movs	r1, #15
 80053b4:	438a      	bics	r2, r1
 80053b6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2207      	movs	r2, #7
 80053c0:	4013      	ands	r3, r2
 80053c2:	b299      	uxth	r1, r3
 80053c4:	183b      	adds	r3, r7, r0
 80053c6:	183a      	adds	r2, r7, r0
 80053c8:	8812      	ldrh	r2, [r2, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	183a      	adds	r2, r7, r0
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	e06c      	b.n	80054b4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 80053da:	2317      	movs	r3, #23
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	2201      	movs	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e067      	b.n	80054b4 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 80053e4:	231f      	movs	r3, #31
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d01b      	beq.n	8005426 <UART_SetConfig+0x216>
 80053ee:	dc02      	bgt.n	80053f6 <UART_SetConfig+0x1e6>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <UART_SetConfig+0x1f0>
 80053f4:	e049      	b.n	800548a <UART_SetConfig+0x27a>
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d024      	beq.n	8005444 <UART_SetConfig+0x234>
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d035      	beq.n	800546a <UART_SetConfig+0x25a>
 80053fe:	e044      	b.n	800548a <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005400:	f7fe f8ac 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8005404:	0003      	movs	r3, r0
 8005406:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	085a      	lsrs	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	18d2      	adds	r2, r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	0019      	movs	r1, r3
 8005418:	0010      	movs	r0, r2
 800541a:	f7fa fe7d 	bl	8000118 <__udivsi3>
 800541e:	0003      	movs	r3, r0
 8005420:	b29b      	uxth	r3, r3
 8005422:	61bb      	str	r3, [r7, #24]
        break;
 8005424:	e036      	b.n	8005494 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <UART_SetConfig+0x2d8>)
 800542e:	189a      	adds	r2, r3, r2
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	0019      	movs	r1, r3
 8005436:	0010      	movs	r0, r2
 8005438:	f7fa fe6e 	bl	8000118 <__udivsi3>
 800543c:	0003      	movs	r3, r0
 800543e:	b29b      	uxth	r3, r3
 8005440:	61bb      	str	r3, [r7, #24]
        break;
 8005442:	e027      	b.n	8005494 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005444:	f7fe f81c 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 8005448:	0003      	movs	r3, r0
 800544a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	085a      	lsrs	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	18d2      	adds	r2, r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	0019      	movs	r1, r3
 800545c:	0010      	movs	r0, r2
 800545e:	f7fa fe5b 	bl	8000118 <__udivsi3>
 8005462:	0003      	movs	r3, r0
 8005464:	b29b      	uxth	r3, r3
 8005466:	61bb      	str	r3, [r7, #24]
        break;
 8005468:	e014      	b.n	8005494 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	2280      	movs	r2, #128	; 0x80
 8005472:	0212      	lsls	r2, r2, #8
 8005474:	189a      	adds	r2, r3, r2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	0019      	movs	r1, r3
 800547c:	0010      	movs	r0, r2
 800547e:	f7fa fe4b 	bl	8000118 <__udivsi3>
 8005482:	0003      	movs	r3, r0
 8005484:	b29b      	uxth	r3, r3
 8005486:	61bb      	str	r3, [r7, #24]
        break;
 8005488:	e004      	b.n	8005494 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 800548a:	2317      	movs	r3, #23
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
        break;
 8005492:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b0f      	cmp	r3, #15
 8005498:	d908      	bls.n	80054ac <UART_SetConfig+0x29c>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	4a11      	ldr	r2, [pc, #68]	; (80054e4 <UART_SetConfig+0x2d4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d804      	bhi.n	80054ac <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	e003      	b.n	80054b4 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 80054ac:	2317      	movs	r3, #23
 80054ae:	18fb      	adds	r3, r7, r3
 80054b0:	2201      	movs	r2, #1
 80054b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80054c0:	2317      	movs	r3, #23
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	781b      	ldrb	r3, [r3, #0]
}
 80054c6:	0018      	movs	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b008      	add	sp, #32
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	ffff69f3 	.word	0xffff69f3
 80054d4:	ffffcfff 	.word	0xffffcfff
 80054d8:	fffff4ff 	.word	0xfffff4ff
 80054dc:	40021000 	.word	0x40021000
 80054e0:	00f42400 	.word	0x00f42400
 80054e4:	0000ffff 	.word	0x0000ffff
 80054e8:	007a1200 	.word	0x007a1200

080054ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2201      	movs	r2, #1
 80054fa:	4013      	ands	r3, r2
 80054fc:	d00b      	beq.n	8005516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a4a      	ldr	r2, [pc, #296]	; (8005630 <UART_AdvFeatureConfig+0x144>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2202      	movs	r2, #2
 800551c:	4013      	ands	r3, r2
 800551e:	d00b      	beq.n	8005538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4a43      	ldr	r2, [pc, #268]	; (8005634 <UART_AdvFeatureConfig+0x148>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2204      	movs	r2, #4
 800553e:	4013      	ands	r3, r2
 8005540:	d00b      	beq.n	800555a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a3b      	ldr	r2, [pc, #236]	; (8005638 <UART_AdvFeatureConfig+0x14c>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2208      	movs	r2, #8
 8005560:	4013      	ands	r3, r2
 8005562:	d00b      	beq.n	800557c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	4a34      	ldr	r2, [pc, #208]	; (800563c <UART_AdvFeatureConfig+0x150>)
 800556c:	4013      	ands	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2210      	movs	r2, #16
 8005582:	4013      	ands	r3, r2
 8005584:	d00b      	beq.n	800559e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4a2c      	ldr	r2, [pc, #176]	; (8005640 <UART_AdvFeatureConfig+0x154>)
 800558e:	4013      	ands	r3, r2
 8005590:	0019      	movs	r1, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2220      	movs	r2, #32
 80055a4:	4013      	ands	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	4a25      	ldr	r2, [pc, #148]	; (8005644 <UART_AdvFeatureConfig+0x158>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	0019      	movs	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2240      	movs	r2, #64	; 0x40
 80055c6:	4013      	ands	r3, r2
 80055c8:	d01d      	beq.n	8005606 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <UART_AdvFeatureConfig+0x15c>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	0019      	movs	r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	035b      	lsls	r3, r3, #13
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10b      	bne.n	8005606 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <UART_AdvFeatureConfig+0x160>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2280      	movs	r2, #128	; 0x80
 800560c:	4013      	ands	r3, r2
 800560e:	d00b      	beq.n	8005628 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4a0e      	ldr	r2, [pc, #56]	; (8005650 <UART_AdvFeatureConfig+0x164>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }
}
 8005628:	46c0      	nop			; (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b002      	add	sp, #8
 800562e:	bd80      	pop	{r7, pc}
 8005630:	fffdffff 	.word	0xfffdffff
 8005634:	fffeffff 	.word	0xfffeffff
 8005638:	fffbffff 	.word	0xfffbffff
 800563c:	ffff7fff 	.word	0xffff7fff
 8005640:	ffffefff 	.word	0xffffefff
 8005644:	ffffdfff 	.word	0xffffdfff
 8005648:	ffefffff 	.word	0xffefffff
 800564c:	ff9fffff 	.word	0xff9fffff
 8005650:	fff7ffff 	.word	0xfff7ffff

08005654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af02      	add	r7, sp, #8
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005662:	f7fc facd 	bl	8001c00 <HAL_GetTick>
 8005666:	0003      	movs	r3, r0
 8005668:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2208      	movs	r2, #8
 8005672:	4013      	ands	r3, r2
 8005674:	2b08      	cmp	r3, #8
 8005676:	d10d      	bne.n	8005694 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	0399      	lsls	r1, r3, #14
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4b16      	ldr	r3, [pc, #88]	; (80056dc <UART_CheckIdleState+0x88>)
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	0013      	movs	r3, r2
 8005686:	2200      	movs	r2, #0
 8005688:	f000 f82a 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 800568c:	1e03      	subs	r3, r0, #0
 800568e:	d001      	beq.n	8005694 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e01f      	b.n	80056d4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2204      	movs	r2, #4
 800569c:	4013      	ands	r3, r2
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d10d      	bne.n	80056be <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	03d9      	lsls	r1, r3, #15
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <UART_CheckIdleState+0x88>)
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	0013      	movs	r3, r2
 80056b0:	2200      	movs	r2, #0
 80056b2:	f000 f815 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 80056b6:	1e03      	subs	r3, r0, #0
 80056b8:	d001      	beq.n	80056be <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e00a      	b.n	80056d4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2270      	movs	r2, #112	; 0x70
 80056ce:	2100      	movs	r1, #0
 80056d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b004      	add	sp, #16
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	01ffffff 	.word	0x01ffffff

080056e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	1dfb      	adds	r3, r7, #7
 80056ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	e05d      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	3301      	adds	r3, #1
 80056f6:	d05a      	beq.n	80057ae <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f8:	f7fc fa82 	bl	8001c00 <HAL_GetTick>
 80056fc:	0002      	movs	r2, r0
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11b      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	492f      	ldr	r1, [pc, #188]	; (80057d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800571a:	400a      	ands	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	438a      	bics	r2, r1
 800572c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2270      	movs	r2, #112	; 0x70
 800573e:	2100      	movs	r1, #0
 8005740:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e043      	b.n	80057ce <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2204      	movs	r2, #4
 800574e:	4013      	ands	r3, r2
 8005750:	d02d      	beq.n	80057ae <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	401a      	ands	r2, r3
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	429a      	cmp	r2, r3
 8005764:	d123      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	0112      	lsls	r2, r2, #4
 800576e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4917      	ldr	r1, [pc, #92]	; (80057d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800577c:	400a      	ands	r2, r1
 800577e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2101      	movs	r1, #1
 800578c:	438a      	bics	r2, r1
 800578e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2270      	movs	r2, #112	; 0x70
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e00f      	b.n	80057ce <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	425a      	negs	r2, r3
 80057be:	4153      	adcs	r3, r2
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	001a      	movs	r2, r3
 80057c4:	1dfb      	adds	r3, r7, #7
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d092      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b004      	add	sp, #16
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	fffffe5f 	.word	0xfffffe5f

080057dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	490a      	ldr	r1, [pc, #40]	; (8005818 <UART_EndRxTransfer+0x3c>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2101      	movs	r1, #1
 8005800:	438a      	bics	r2, r1
 8005802:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005810:	46c0      	nop			; (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}
 8005818:	fffffedf 	.word	0xfffffedf

0800581c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	225a      	movs	r2, #90	; 0x5a
 800582e:	2100      	movs	r1, #0
 8005830:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2252      	movs	r2, #82	; 0x52
 8005836:	2100      	movs	r1, #0
 8005838:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff fcdf 	bl	8005200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	46bd      	mov	sp, r7
 8005846:	b004      	add	sp, #16
 8005848:	bd80      	pop	{r7, pc}

0800584a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	438a      	bics	r2, r1
 8005860:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	0018      	movs	r0, r3
 8005872:	f7ff fcbd 	bl	80051f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	46bd      	mov	sp, r7
 800587a:	b002      	add	sp, #8
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <__errno>:
 8005890:	4b01      	ldr	r3, [pc, #4]	; (8005898 <__errno+0x8>)
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	4770      	bx	lr
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	20000014 	.word	0x20000014

0800589c <__libc_init_array>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	2600      	movs	r6, #0
 80058a0:	4d0c      	ldr	r5, [pc, #48]	; (80058d4 <__libc_init_array+0x38>)
 80058a2:	4c0d      	ldr	r4, [pc, #52]	; (80058d8 <__libc_init_array+0x3c>)
 80058a4:	1b64      	subs	r4, r4, r5
 80058a6:	10a4      	asrs	r4, r4, #2
 80058a8:	42a6      	cmp	r6, r4
 80058aa:	d109      	bne.n	80058c0 <__libc_init_array+0x24>
 80058ac:	2600      	movs	r6, #0
 80058ae:	f000 fc29 	bl	8006104 <_init>
 80058b2:	4d0a      	ldr	r5, [pc, #40]	; (80058dc <__libc_init_array+0x40>)
 80058b4:	4c0a      	ldr	r4, [pc, #40]	; (80058e0 <__libc_init_array+0x44>)
 80058b6:	1b64      	subs	r4, r4, r5
 80058b8:	10a4      	asrs	r4, r4, #2
 80058ba:	42a6      	cmp	r6, r4
 80058bc:	d105      	bne.n	80058ca <__libc_init_array+0x2e>
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	00b3      	lsls	r3, r6, #2
 80058c2:	58eb      	ldr	r3, [r5, r3]
 80058c4:	4798      	blx	r3
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7ee      	b.n	80058a8 <__libc_init_array+0xc>
 80058ca:	00b3      	lsls	r3, r6, #2
 80058cc:	58eb      	ldr	r3, [r5, r3]
 80058ce:	4798      	blx	r3
 80058d0:	3601      	adds	r6, #1
 80058d2:	e7f2      	b.n	80058ba <__libc_init_array+0x1e>
 80058d4:	08006950 	.word	0x08006950
 80058d8:	08006950 	.word	0x08006950
 80058dc:	08006950 	.word	0x08006950
 80058e0:	08006954 	.word	0x08006954

080058e4 <memcpy>:
 80058e4:	2300      	movs	r3, #0
 80058e6:	b510      	push	{r4, lr}
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d100      	bne.n	80058ee <memcpy+0xa>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	5ccc      	ldrb	r4, [r1, r3]
 80058f0:	54c4      	strb	r4, [r0, r3]
 80058f2:	3301      	adds	r3, #1
 80058f4:	e7f8      	b.n	80058e8 <memcpy+0x4>

080058f6 <memset>:
 80058f6:	0003      	movs	r3, r0
 80058f8:	1812      	adds	r2, r2, r0
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d100      	bne.n	8005900 <memset+0xa>
 80058fe:	4770      	bx	lr
 8005900:	7019      	strb	r1, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	e7f9      	b.n	80058fa <memset+0x4>
	...

08005908 <siprintf>:
 8005908:	b40e      	push	{r1, r2, r3}
 800590a:	b500      	push	{lr}
 800590c:	490b      	ldr	r1, [pc, #44]	; (800593c <siprintf+0x34>)
 800590e:	b09c      	sub	sp, #112	; 0x70
 8005910:	ab1d      	add	r3, sp, #116	; 0x74
 8005912:	9002      	str	r0, [sp, #8]
 8005914:	9006      	str	r0, [sp, #24]
 8005916:	9107      	str	r1, [sp, #28]
 8005918:	9104      	str	r1, [sp, #16]
 800591a:	4809      	ldr	r0, [pc, #36]	; (8005940 <siprintf+0x38>)
 800591c:	4909      	ldr	r1, [pc, #36]	; (8005944 <siprintf+0x3c>)
 800591e:	cb04      	ldmia	r3!, {r2}
 8005920:	9105      	str	r1, [sp, #20]
 8005922:	6800      	ldr	r0, [r0, #0]
 8005924:	a902      	add	r1, sp, #8
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	f000 f870 	bl	8005a0c <_svfiprintf_r>
 800592c:	2300      	movs	r3, #0
 800592e:	9a02      	ldr	r2, [sp, #8]
 8005930:	7013      	strb	r3, [r2, #0]
 8005932:	b01c      	add	sp, #112	; 0x70
 8005934:	bc08      	pop	{r3}
 8005936:	b003      	add	sp, #12
 8005938:	4718      	bx	r3
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	7fffffff 	.word	0x7fffffff
 8005940:	20000014 	.word	0x20000014
 8005944:	ffff0208 	.word	0xffff0208

08005948 <__ssputs_r>:
 8005948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800594a:	688e      	ldr	r6, [r1, #8]
 800594c:	b085      	sub	sp, #20
 800594e:	0007      	movs	r7, r0
 8005950:	000c      	movs	r4, r1
 8005952:	9203      	str	r2, [sp, #12]
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	429e      	cmp	r6, r3
 8005958:	d83c      	bhi.n	80059d4 <__ssputs_r+0x8c>
 800595a:	2390      	movs	r3, #144	; 0x90
 800595c:	898a      	ldrh	r2, [r1, #12]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	421a      	tst	r2, r3
 8005962:	d034      	beq.n	80059ce <__ssputs_r+0x86>
 8005964:	2503      	movs	r5, #3
 8005966:	6909      	ldr	r1, [r1, #16]
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	1a5b      	subs	r3, r3, r1
 800596c:	9302      	str	r3, [sp, #8]
 800596e:	6963      	ldr	r3, [r4, #20]
 8005970:	9802      	ldr	r0, [sp, #8]
 8005972:	435d      	muls	r5, r3
 8005974:	0feb      	lsrs	r3, r5, #31
 8005976:	195d      	adds	r5, r3, r5
 8005978:	9b01      	ldr	r3, [sp, #4]
 800597a:	106d      	asrs	r5, r5, #1
 800597c:	3301      	adds	r3, #1
 800597e:	181b      	adds	r3, r3, r0
 8005980:	42ab      	cmp	r3, r5
 8005982:	d900      	bls.n	8005986 <__ssputs_r+0x3e>
 8005984:	001d      	movs	r5, r3
 8005986:	0553      	lsls	r3, r2, #21
 8005988:	d532      	bpl.n	80059f0 <__ssputs_r+0xa8>
 800598a:	0029      	movs	r1, r5
 800598c:	0038      	movs	r0, r7
 800598e:	f000 fb19 	bl	8005fc4 <_malloc_r>
 8005992:	1e06      	subs	r6, r0, #0
 8005994:	d109      	bne.n	80059aa <__ssputs_r+0x62>
 8005996:	230c      	movs	r3, #12
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	2340      	movs	r3, #64	; 0x40
 800599c:	2001      	movs	r0, #1
 800599e:	89a2      	ldrh	r2, [r4, #12]
 80059a0:	4240      	negs	r0, r0
 80059a2:	4313      	orrs	r3, r2
 80059a4:	81a3      	strh	r3, [r4, #12]
 80059a6:	b005      	add	sp, #20
 80059a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059aa:	9a02      	ldr	r2, [sp, #8]
 80059ac:	6921      	ldr	r1, [r4, #16]
 80059ae:	f7ff ff99 	bl	80058e4 <memcpy>
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <__ssputs_r+0xc0>)
 80059b6:	401a      	ands	r2, r3
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	4313      	orrs	r3, r2
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	9b02      	ldr	r3, [sp, #8]
 80059c0:	6126      	str	r6, [r4, #16]
 80059c2:	18f6      	adds	r6, r6, r3
 80059c4:	6026      	str	r6, [r4, #0]
 80059c6:	6165      	str	r5, [r4, #20]
 80059c8:	9e01      	ldr	r6, [sp, #4]
 80059ca:	1aed      	subs	r5, r5, r3
 80059cc:	60a5      	str	r5, [r4, #8]
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	429e      	cmp	r6, r3
 80059d2:	d900      	bls.n	80059d6 <__ssputs_r+0x8e>
 80059d4:	9e01      	ldr	r6, [sp, #4]
 80059d6:	0032      	movs	r2, r6
 80059d8:	9903      	ldr	r1, [sp, #12]
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	f000 fa95 	bl	8005f0a <memmove>
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	2000      	movs	r0, #0
 80059e4:	1b9b      	subs	r3, r3, r6
 80059e6:	60a3      	str	r3, [r4, #8]
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	199e      	adds	r6, r3, r6
 80059ec:	6026      	str	r6, [r4, #0]
 80059ee:	e7da      	b.n	80059a6 <__ssputs_r+0x5e>
 80059f0:	002a      	movs	r2, r5
 80059f2:	0038      	movs	r0, r7
 80059f4:	f000 fb44 	bl	8006080 <_realloc_r>
 80059f8:	1e06      	subs	r6, r0, #0
 80059fa:	d1e0      	bne.n	80059be <__ssputs_r+0x76>
 80059fc:	6921      	ldr	r1, [r4, #16]
 80059fe:	0038      	movs	r0, r7
 8005a00:	f000 fa96 	bl	8005f30 <_free_r>
 8005a04:	e7c7      	b.n	8005996 <__ssputs_r+0x4e>
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	fffffb7f 	.word	0xfffffb7f

08005a0c <_svfiprintf_r>:
 8005a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0e:	b0a1      	sub	sp, #132	; 0x84
 8005a10:	9003      	str	r0, [sp, #12]
 8005a12:	001d      	movs	r5, r3
 8005a14:	898b      	ldrh	r3, [r1, #12]
 8005a16:	000f      	movs	r7, r1
 8005a18:	0016      	movs	r6, r2
 8005a1a:	061b      	lsls	r3, r3, #24
 8005a1c:	d511      	bpl.n	8005a42 <_svfiprintf_r+0x36>
 8005a1e:	690b      	ldr	r3, [r1, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10e      	bne.n	8005a42 <_svfiprintf_r+0x36>
 8005a24:	2140      	movs	r1, #64	; 0x40
 8005a26:	f000 facd 	bl	8005fc4 <_malloc_r>
 8005a2a:	6038      	str	r0, [r7, #0]
 8005a2c:	6138      	str	r0, [r7, #16]
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d105      	bne.n	8005a3e <_svfiprintf_r+0x32>
 8005a32:	230c      	movs	r3, #12
 8005a34:	9a03      	ldr	r2, [sp, #12]
 8005a36:	3801      	subs	r0, #1
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	b021      	add	sp, #132	; 0x84
 8005a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a3e:	2340      	movs	r3, #64	; 0x40
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	2300      	movs	r3, #0
 8005a44:	ac08      	add	r4, sp, #32
 8005a46:	6163      	str	r3, [r4, #20]
 8005a48:	3320      	adds	r3, #32
 8005a4a:	7663      	strb	r3, [r4, #25]
 8005a4c:	3310      	adds	r3, #16
 8005a4e:	76a3      	strb	r3, [r4, #26]
 8005a50:	9507      	str	r5, [sp, #28]
 8005a52:	0035      	movs	r5, r6
 8005a54:	782b      	ldrb	r3, [r5, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <_svfiprintf_r+0x52>
 8005a5a:	2b25      	cmp	r3, #37	; 0x25
 8005a5c:	d146      	bne.n	8005aec <_svfiprintf_r+0xe0>
 8005a5e:	1bab      	subs	r3, r5, r6
 8005a60:	9305      	str	r3, [sp, #20]
 8005a62:	d00c      	beq.n	8005a7e <_svfiprintf_r+0x72>
 8005a64:	0032      	movs	r2, r6
 8005a66:	0039      	movs	r1, r7
 8005a68:	9803      	ldr	r0, [sp, #12]
 8005a6a:	f7ff ff6d 	bl	8005948 <__ssputs_r>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d100      	bne.n	8005a74 <_svfiprintf_r+0x68>
 8005a72:	e0ae      	b.n	8005bd2 <_svfiprintf_r+0x1c6>
 8005a74:	6962      	ldr	r2, [r4, #20]
 8005a76:	9b05      	ldr	r3, [sp, #20]
 8005a78:	4694      	mov	ip, r2
 8005a7a:	4463      	add	r3, ip
 8005a7c:	6163      	str	r3, [r4, #20]
 8005a7e:	782b      	ldrb	r3, [r5, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d100      	bne.n	8005a86 <_svfiprintf_r+0x7a>
 8005a84:	e0a5      	b.n	8005bd2 <_svfiprintf_r+0x1c6>
 8005a86:	2201      	movs	r2, #1
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4252      	negs	r2, r2
 8005a8c:	6062      	str	r2, [r4, #4]
 8005a8e:	a904      	add	r1, sp, #16
 8005a90:	3254      	adds	r2, #84	; 0x54
 8005a92:	1852      	adds	r2, r2, r1
 8005a94:	1c6e      	adds	r6, r5, #1
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	60e3      	str	r3, [r4, #12]
 8005a9a:	60a3      	str	r3, [r4, #8]
 8005a9c:	7013      	strb	r3, [r2, #0]
 8005a9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005aa0:	7831      	ldrb	r1, [r6, #0]
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	4853      	ldr	r0, [pc, #332]	; (8005bf4 <_svfiprintf_r+0x1e8>)
 8005aa6:	f000 fa25 	bl	8005ef4 <memchr>
 8005aaa:	1c75      	adds	r5, r6, #1
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d11f      	bne.n	8005af0 <_svfiprintf_r+0xe4>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	06d3      	lsls	r3, r2, #27
 8005ab4:	d504      	bpl.n	8005ac0 <_svfiprintf_r+0xb4>
 8005ab6:	2353      	movs	r3, #83	; 0x53
 8005ab8:	a904      	add	r1, sp, #16
 8005aba:	185b      	adds	r3, r3, r1
 8005abc:	2120      	movs	r1, #32
 8005abe:	7019      	strb	r1, [r3, #0]
 8005ac0:	0713      	lsls	r3, r2, #28
 8005ac2:	d504      	bpl.n	8005ace <_svfiprintf_r+0xc2>
 8005ac4:	2353      	movs	r3, #83	; 0x53
 8005ac6:	a904      	add	r1, sp, #16
 8005ac8:	185b      	adds	r3, r3, r1
 8005aca:	212b      	movs	r1, #43	; 0x2b
 8005acc:	7019      	strb	r1, [r3, #0]
 8005ace:	7833      	ldrb	r3, [r6, #0]
 8005ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad2:	d016      	beq.n	8005b02 <_svfiprintf_r+0xf6>
 8005ad4:	0035      	movs	r5, r6
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	200a      	movs	r0, #10
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	782a      	ldrb	r2, [r5, #0]
 8005ade:	1c6e      	adds	r6, r5, #1
 8005ae0:	3a30      	subs	r2, #48	; 0x30
 8005ae2:	2a09      	cmp	r2, #9
 8005ae4:	d94e      	bls.n	8005b84 <_svfiprintf_r+0x178>
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	d018      	beq.n	8005b1c <_svfiprintf_r+0x110>
 8005aea:	e010      	b.n	8005b0e <_svfiprintf_r+0x102>
 8005aec:	3501      	adds	r5, #1
 8005aee:	e7b1      	b.n	8005a54 <_svfiprintf_r+0x48>
 8005af0:	4b40      	ldr	r3, [pc, #256]	; (8005bf4 <_svfiprintf_r+0x1e8>)
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	1ac0      	subs	r0, r0, r3
 8005af6:	2301      	movs	r3, #1
 8005af8:	4083      	lsls	r3, r0
 8005afa:	4313      	orrs	r3, r2
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	002e      	movs	r6, r5
 8005b00:	e7ce      	b.n	8005aa0 <_svfiprintf_r+0x94>
 8005b02:	9b07      	ldr	r3, [sp, #28]
 8005b04:	1d19      	adds	r1, r3, #4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	9107      	str	r1, [sp, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	db01      	blt.n	8005b12 <_svfiprintf_r+0x106>
 8005b0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b10:	e004      	b.n	8005b1c <_svfiprintf_r+0x110>
 8005b12:	425b      	negs	r3, r3
 8005b14:	60e3      	str	r3, [r4, #12]
 8005b16:	2302      	movs	r3, #2
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	782b      	ldrb	r3, [r5, #0]
 8005b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b20:	d10a      	bne.n	8005b38 <_svfiprintf_r+0x12c>
 8005b22:	786b      	ldrb	r3, [r5, #1]
 8005b24:	2b2a      	cmp	r3, #42	; 0x2a
 8005b26:	d135      	bne.n	8005b94 <_svfiprintf_r+0x188>
 8005b28:	9b07      	ldr	r3, [sp, #28]
 8005b2a:	3502      	adds	r5, #2
 8005b2c:	1d1a      	adds	r2, r3, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	9207      	str	r2, [sp, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	db2b      	blt.n	8005b8e <_svfiprintf_r+0x182>
 8005b36:	9309      	str	r3, [sp, #36]	; 0x24
 8005b38:	4e2f      	ldr	r6, [pc, #188]	; (8005bf8 <_svfiprintf_r+0x1ec>)
 8005b3a:	7829      	ldrb	r1, [r5, #0]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	0030      	movs	r0, r6
 8005b40:	f000 f9d8 	bl	8005ef4 <memchr>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d006      	beq.n	8005b56 <_svfiprintf_r+0x14a>
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	1b80      	subs	r0, r0, r6
 8005b4c:	4083      	lsls	r3, r0
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	3501      	adds	r5, #1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	7829      	ldrb	r1, [r5, #0]
 8005b58:	2206      	movs	r2, #6
 8005b5a:	4828      	ldr	r0, [pc, #160]	; (8005bfc <_svfiprintf_r+0x1f0>)
 8005b5c:	1c6e      	adds	r6, r5, #1
 8005b5e:	7621      	strb	r1, [r4, #24]
 8005b60:	f000 f9c8 	bl	8005ef4 <memchr>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d03c      	beq.n	8005be2 <_svfiprintf_r+0x1d6>
 8005b68:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <_svfiprintf_r+0x1f4>)
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d125      	bne.n	8005bba <_svfiprintf_r+0x1ae>
 8005b6e:	2207      	movs	r2, #7
 8005b70:	9b07      	ldr	r3, [sp, #28]
 8005b72:	3307      	adds	r3, #7
 8005b74:	4393      	bics	r3, r2
 8005b76:	3308      	adds	r3, #8
 8005b78:	9307      	str	r3, [sp, #28]
 8005b7a:	6963      	ldr	r3, [r4, #20]
 8005b7c:	9a04      	ldr	r2, [sp, #16]
 8005b7e:	189b      	adds	r3, r3, r2
 8005b80:	6163      	str	r3, [r4, #20]
 8005b82:	e766      	b.n	8005a52 <_svfiprintf_r+0x46>
 8005b84:	4343      	muls	r3, r0
 8005b86:	2101      	movs	r1, #1
 8005b88:	189b      	adds	r3, r3, r2
 8005b8a:	0035      	movs	r5, r6
 8005b8c:	e7a6      	b.n	8005adc <_svfiprintf_r+0xd0>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	425b      	negs	r3, r3
 8005b92:	e7d0      	b.n	8005b36 <_svfiprintf_r+0x12a>
 8005b94:	2300      	movs	r3, #0
 8005b96:	200a      	movs	r0, #10
 8005b98:	001a      	movs	r2, r3
 8005b9a:	3501      	adds	r5, #1
 8005b9c:	6063      	str	r3, [r4, #4]
 8005b9e:	7829      	ldrb	r1, [r5, #0]
 8005ba0:	1c6e      	adds	r6, r5, #1
 8005ba2:	3930      	subs	r1, #48	; 0x30
 8005ba4:	2909      	cmp	r1, #9
 8005ba6:	d903      	bls.n	8005bb0 <_svfiprintf_r+0x1a4>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0c5      	beq.n	8005b38 <_svfiprintf_r+0x12c>
 8005bac:	9209      	str	r2, [sp, #36]	; 0x24
 8005bae:	e7c3      	b.n	8005b38 <_svfiprintf_r+0x12c>
 8005bb0:	4342      	muls	r2, r0
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	1852      	adds	r2, r2, r1
 8005bb6:	0035      	movs	r5, r6
 8005bb8:	e7f1      	b.n	8005b9e <_svfiprintf_r+0x192>
 8005bba:	ab07      	add	r3, sp, #28
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	003a      	movs	r2, r7
 8005bc0:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <_svfiprintf_r+0x1f8>)
 8005bc2:	0021      	movs	r1, r4
 8005bc4:	9803      	ldr	r0, [sp, #12]
 8005bc6:	e000      	b.n	8005bca <_svfiprintf_r+0x1be>
 8005bc8:	bf00      	nop
 8005bca:	9004      	str	r0, [sp, #16]
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	d1d3      	bne.n	8005b7a <_svfiprintf_r+0x16e>
 8005bd2:	89bb      	ldrh	r3, [r7, #12]
 8005bd4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bd6:	065b      	lsls	r3, r3, #25
 8005bd8:	d400      	bmi.n	8005bdc <_svfiprintf_r+0x1d0>
 8005bda:	e72e      	b.n	8005a3a <_svfiprintf_r+0x2e>
 8005bdc:	2001      	movs	r0, #1
 8005bde:	4240      	negs	r0, r0
 8005be0:	e72b      	b.n	8005a3a <_svfiprintf_r+0x2e>
 8005be2:	ab07      	add	r3, sp, #28
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	003a      	movs	r2, r7
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <_svfiprintf_r+0x1f8>)
 8005bea:	0021      	movs	r1, r4
 8005bec:	9803      	ldr	r0, [sp, #12]
 8005bee:	f000 f879 	bl	8005ce4 <_printf_i>
 8005bf2:	e7ea      	b.n	8005bca <_svfiprintf_r+0x1be>
 8005bf4:	0800691c 	.word	0x0800691c
 8005bf8:	08006922 	.word	0x08006922
 8005bfc:	08006926 	.word	0x08006926
 8005c00:	00000000 	.word	0x00000000
 8005c04:	08005949 	.word	0x08005949

08005c08 <_printf_common>:
 8005c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c0a:	0015      	movs	r5, r2
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	688a      	ldr	r2, [r1, #8]
 8005c10:	690b      	ldr	r3, [r1, #16]
 8005c12:	9000      	str	r0, [sp, #0]
 8005c14:	000c      	movs	r4, r1
 8005c16:	4293      	cmp	r3, r2
 8005c18:	da00      	bge.n	8005c1c <_printf_common+0x14>
 8005c1a:	0013      	movs	r3, r2
 8005c1c:	0022      	movs	r2, r4
 8005c1e:	602b      	str	r3, [r5, #0]
 8005c20:	3243      	adds	r2, #67	; 0x43
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	2a00      	cmp	r2, #0
 8005c26:	d001      	beq.n	8005c2c <_printf_common+0x24>
 8005c28:	3301      	adds	r3, #1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	069b      	lsls	r3, r3, #26
 8005c30:	d502      	bpl.n	8005c38 <_printf_common+0x30>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	3302      	adds	r3, #2
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	2706      	movs	r7, #6
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	401f      	ands	r7, r3
 8005c3e:	d027      	beq.n	8005c90 <_printf_common+0x88>
 8005c40:	0023      	movs	r3, r4
 8005c42:	3343      	adds	r3, #67	; 0x43
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	1e5a      	subs	r2, r3, #1
 8005c48:	4193      	sbcs	r3, r2
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	0692      	lsls	r2, r2, #26
 8005c4e:	d430      	bmi.n	8005cb2 <_printf_common+0xaa>
 8005c50:	0022      	movs	r2, r4
 8005c52:	9901      	ldr	r1, [sp, #4]
 8005c54:	3243      	adds	r2, #67	; 0x43
 8005c56:	9800      	ldr	r0, [sp, #0]
 8005c58:	9e08      	ldr	r6, [sp, #32]
 8005c5a:	47b0      	blx	r6
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d025      	beq.n	8005cac <_printf_common+0xa4>
 8005c60:	2306      	movs	r3, #6
 8005c62:	6820      	ldr	r0, [r4, #0]
 8005c64:	682a      	ldr	r2, [r5, #0]
 8005c66:	68e1      	ldr	r1, [r4, #12]
 8005c68:	4003      	ands	r3, r0
 8005c6a:	2500      	movs	r5, #0
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	d103      	bne.n	8005c78 <_printf_common+0x70>
 8005c70:	1a8d      	subs	r5, r1, r2
 8005c72:	43eb      	mvns	r3, r5
 8005c74:	17db      	asrs	r3, r3, #31
 8005c76:	401d      	ands	r5, r3
 8005c78:	68a3      	ldr	r3, [r4, #8]
 8005c7a:	6922      	ldr	r2, [r4, #16]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	dd01      	ble.n	8005c84 <_printf_common+0x7c>
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	18ed      	adds	r5, r5, r3
 8005c84:	2700      	movs	r7, #0
 8005c86:	42bd      	cmp	r5, r7
 8005c88:	d120      	bne.n	8005ccc <_printf_common+0xc4>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e010      	b.n	8005cb0 <_printf_common+0xa8>
 8005c8e:	3701      	adds	r7, #1
 8005c90:	68e3      	ldr	r3, [r4, #12]
 8005c92:	682a      	ldr	r2, [r5, #0]
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	42bb      	cmp	r3, r7
 8005c98:	ddd2      	ble.n	8005c40 <_printf_common+0x38>
 8005c9a:	0022      	movs	r2, r4
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	3219      	adds	r2, #25
 8005ca0:	9901      	ldr	r1, [sp, #4]
 8005ca2:	9800      	ldr	r0, [sp, #0]
 8005ca4:	9e08      	ldr	r6, [sp, #32]
 8005ca6:	47b0      	blx	r6
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d1f0      	bne.n	8005c8e <_printf_common+0x86>
 8005cac:	2001      	movs	r0, #1
 8005cae:	4240      	negs	r0, r0
 8005cb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cb2:	2030      	movs	r0, #48	; 0x30
 8005cb4:	18e1      	adds	r1, r4, r3
 8005cb6:	3143      	adds	r1, #67	; 0x43
 8005cb8:	7008      	strb	r0, [r1, #0]
 8005cba:	0021      	movs	r1, r4
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	3145      	adds	r1, #69	; 0x45
 8005cc0:	7809      	ldrb	r1, [r1, #0]
 8005cc2:	18a2      	adds	r2, r4, r2
 8005cc4:	3243      	adds	r2, #67	; 0x43
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	7011      	strb	r1, [r2, #0]
 8005cca:	e7c1      	b.n	8005c50 <_printf_common+0x48>
 8005ccc:	0022      	movs	r2, r4
 8005cce:	2301      	movs	r3, #1
 8005cd0:	321a      	adds	r2, #26
 8005cd2:	9901      	ldr	r1, [sp, #4]
 8005cd4:	9800      	ldr	r0, [sp, #0]
 8005cd6:	9e08      	ldr	r6, [sp, #32]
 8005cd8:	47b0      	blx	r6
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	d0e6      	beq.n	8005cac <_printf_common+0xa4>
 8005cde:	3701      	adds	r7, #1
 8005ce0:	e7d1      	b.n	8005c86 <_printf_common+0x7e>
	...

08005ce4 <_printf_i>:
 8005ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ce6:	b089      	sub	sp, #36	; 0x24
 8005ce8:	9204      	str	r2, [sp, #16]
 8005cea:	000a      	movs	r2, r1
 8005cec:	3243      	adds	r2, #67	; 0x43
 8005cee:	9305      	str	r3, [sp, #20]
 8005cf0:	9003      	str	r0, [sp, #12]
 8005cf2:	9202      	str	r2, [sp, #8]
 8005cf4:	7e0a      	ldrb	r2, [r1, #24]
 8005cf6:	000c      	movs	r4, r1
 8005cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cfa:	2a6e      	cmp	r2, #110	; 0x6e
 8005cfc:	d100      	bne.n	8005d00 <_printf_i+0x1c>
 8005cfe:	e086      	b.n	8005e0e <_printf_i+0x12a>
 8005d00:	d81f      	bhi.n	8005d42 <_printf_i+0x5e>
 8005d02:	2a63      	cmp	r2, #99	; 0x63
 8005d04:	d033      	beq.n	8005d6e <_printf_i+0x8a>
 8005d06:	d808      	bhi.n	8005d1a <_printf_i+0x36>
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	d100      	bne.n	8005d0e <_printf_i+0x2a>
 8005d0c:	e08c      	b.n	8005e28 <_printf_i+0x144>
 8005d0e:	2a58      	cmp	r2, #88	; 0x58
 8005d10:	d04d      	beq.n	8005dae <_printf_i+0xca>
 8005d12:	0025      	movs	r5, r4
 8005d14:	3542      	adds	r5, #66	; 0x42
 8005d16:	702a      	strb	r2, [r5, #0]
 8005d18:	e030      	b.n	8005d7c <_printf_i+0x98>
 8005d1a:	2a64      	cmp	r2, #100	; 0x64
 8005d1c:	d001      	beq.n	8005d22 <_printf_i+0x3e>
 8005d1e:	2a69      	cmp	r2, #105	; 0x69
 8005d20:	d1f7      	bne.n	8005d12 <_printf_i+0x2e>
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	6825      	ldr	r5, [r4, #0]
 8005d26:	1d0a      	adds	r2, r1, #4
 8005d28:	0628      	lsls	r0, r5, #24
 8005d2a:	d529      	bpl.n	8005d80 <_printf_i+0x9c>
 8005d2c:	6808      	ldr	r0, [r1, #0]
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	2800      	cmp	r0, #0
 8005d32:	da03      	bge.n	8005d3c <_printf_i+0x58>
 8005d34:	232d      	movs	r3, #45	; 0x2d
 8005d36:	9a02      	ldr	r2, [sp, #8]
 8005d38:	4240      	negs	r0, r0
 8005d3a:	7013      	strb	r3, [r2, #0]
 8005d3c:	4e6b      	ldr	r6, [pc, #428]	; (8005eec <_printf_i+0x208>)
 8005d3e:	270a      	movs	r7, #10
 8005d40:	e04f      	b.n	8005de2 <_printf_i+0xfe>
 8005d42:	2a73      	cmp	r2, #115	; 0x73
 8005d44:	d074      	beq.n	8005e30 <_printf_i+0x14c>
 8005d46:	d808      	bhi.n	8005d5a <_printf_i+0x76>
 8005d48:	2a6f      	cmp	r2, #111	; 0x6f
 8005d4a:	d01f      	beq.n	8005d8c <_printf_i+0xa8>
 8005d4c:	2a70      	cmp	r2, #112	; 0x70
 8005d4e:	d1e0      	bne.n	8005d12 <_printf_i+0x2e>
 8005d50:	2220      	movs	r2, #32
 8005d52:	6809      	ldr	r1, [r1, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	6022      	str	r2, [r4, #0]
 8005d58:	e003      	b.n	8005d62 <_printf_i+0x7e>
 8005d5a:	2a75      	cmp	r2, #117	; 0x75
 8005d5c:	d016      	beq.n	8005d8c <_printf_i+0xa8>
 8005d5e:	2a78      	cmp	r2, #120	; 0x78
 8005d60:	d1d7      	bne.n	8005d12 <_printf_i+0x2e>
 8005d62:	0022      	movs	r2, r4
 8005d64:	2178      	movs	r1, #120	; 0x78
 8005d66:	3245      	adds	r2, #69	; 0x45
 8005d68:	7011      	strb	r1, [r2, #0]
 8005d6a:	4e61      	ldr	r6, [pc, #388]	; (8005ef0 <_printf_i+0x20c>)
 8005d6c:	e022      	b.n	8005db4 <_printf_i+0xd0>
 8005d6e:	0025      	movs	r5, r4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	3542      	adds	r5, #66	; 0x42
 8005d74:	1d11      	adds	r1, r2, #4
 8005d76:	6019      	str	r1, [r3, #0]
 8005d78:	6813      	ldr	r3, [r2, #0]
 8005d7a:	702b      	strb	r3, [r5, #0]
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e065      	b.n	8005e4c <_printf_i+0x168>
 8005d80:	6808      	ldr	r0, [r1, #0]
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	0669      	lsls	r1, r5, #25
 8005d86:	d5d3      	bpl.n	8005d30 <_printf_i+0x4c>
 8005d88:	b200      	sxth	r0, r0
 8005d8a:	e7d1      	b.n	8005d30 <_printf_i+0x4c>
 8005d8c:	6819      	ldr	r1, [r3, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	1d08      	adds	r0, r1, #4
 8005d92:	6018      	str	r0, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	062e      	lsls	r6, r5, #24
 8005d98:	d505      	bpl.n	8005da6 <_printf_i+0xc2>
 8005d9a:	4e54      	ldr	r6, [pc, #336]	; (8005eec <_printf_i+0x208>)
 8005d9c:	2708      	movs	r7, #8
 8005d9e:	2a6f      	cmp	r2, #111	; 0x6f
 8005da0:	d01b      	beq.n	8005dda <_printf_i+0xf6>
 8005da2:	270a      	movs	r7, #10
 8005da4:	e019      	b.n	8005dda <_printf_i+0xf6>
 8005da6:	066d      	lsls	r5, r5, #25
 8005da8:	d5f7      	bpl.n	8005d9a <_printf_i+0xb6>
 8005daa:	b280      	uxth	r0, r0
 8005dac:	e7f5      	b.n	8005d9a <_printf_i+0xb6>
 8005dae:	3145      	adds	r1, #69	; 0x45
 8005db0:	4e4e      	ldr	r6, [pc, #312]	; (8005eec <_printf_i+0x208>)
 8005db2:	700a      	strb	r2, [r1, #0]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	1d01      	adds	r1, r0, #4
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6019      	str	r1, [r3, #0]
 8005dbe:	0615      	lsls	r5, r2, #24
 8005dc0:	d521      	bpl.n	8005e06 <_printf_i+0x122>
 8005dc2:	07d3      	lsls	r3, r2, #31
 8005dc4:	d502      	bpl.n	8005dcc <_printf_i+0xe8>
 8005dc6:	2320      	movs	r3, #32
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	2710      	movs	r7, #16
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d103      	bne.n	8005dda <_printf_i+0xf6>
 8005dd2:	2320      	movs	r3, #32
 8005dd4:	6822      	ldr	r2, [r4, #0]
 8005dd6:	439a      	bics	r2, r3
 8005dd8:	6022      	str	r2, [r4, #0]
 8005dda:	0023      	movs	r3, r4
 8005ddc:	2200      	movs	r2, #0
 8005dde:	3343      	adds	r3, #67	; 0x43
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	6863      	ldr	r3, [r4, #4]
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	db58      	blt.n	8005e9c <_printf_i+0x1b8>
 8005dea:	2204      	movs	r2, #4
 8005dec:	6821      	ldr	r1, [r4, #0]
 8005dee:	4391      	bics	r1, r2
 8005df0:	6021      	str	r1, [r4, #0]
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d154      	bne.n	8005ea0 <_printf_i+0x1bc>
 8005df6:	9d02      	ldr	r5, [sp, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d05a      	beq.n	8005eb2 <_printf_i+0x1ce>
 8005dfc:	0025      	movs	r5, r4
 8005dfe:	7833      	ldrb	r3, [r6, #0]
 8005e00:	3542      	adds	r5, #66	; 0x42
 8005e02:	702b      	strb	r3, [r5, #0]
 8005e04:	e055      	b.n	8005eb2 <_printf_i+0x1ce>
 8005e06:	0655      	lsls	r5, r2, #25
 8005e08:	d5db      	bpl.n	8005dc2 <_printf_i+0xde>
 8005e0a:	b280      	uxth	r0, r0
 8005e0c:	e7d9      	b.n	8005dc2 <_printf_i+0xde>
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	680d      	ldr	r5, [r1, #0]
 8005e12:	1d10      	adds	r0, r2, #4
 8005e14:	6949      	ldr	r1, [r1, #20]
 8005e16:	6018      	str	r0, [r3, #0]
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	062e      	lsls	r6, r5, #24
 8005e1c:	d501      	bpl.n	8005e22 <_printf_i+0x13e>
 8005e1e:	6019      	str	r1, [r3, #0]
 8005e20:	e002      	b.n	8005e28 <_printf_i+0x144>
 8005e22:	066d      	lsls	r5, r5, #25
 8005e24:	d5fb      	bpl.n	8005e1e <_printf_i+0x13a>
 8005e26:	8019      	strh	r1, [r3, #0]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9d02      	ldr	r5, [sp, #8]
 8005e2c:	6123      	str	r3, [r4, #16]
 8005e2e:	e04f      	b.n	8005ed0 <_printf_i+0x1ec>
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	1d11      	adds	r1, r2, #4
 8005e34:	6019      	str	r1, [r3, #0]
 8005e36:	6815      	ldr	r5, [r2, #0]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6862      	ldr	r2, [r4, #4]
 8005e3c:	0028      	movs	r0, r5
 8005e3e:	f000 f859 	bl	8005ef4 <memchr>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d001      	beq.n	8005e4a <_printf_i+0x166>
 8005e46:	1b40      	subs	r0, r0, r5
 8005e48:	6060      	str	r0, [r4, #4]
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9a02      	ldr	r2, [sp, #8]
 8005e52:	7013      	strb	r3, [r2, #0]
 8005e54:	e03c      	b.n	8005ed0 <_printf_i+0x1ec>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	002a      	movs	r2, r5
 8005e5a:	9904      	ldr	r1, [sp, #16]
 8005e5c:	9803      	ldr	r0, [sp, #12]
 8005e5e:	9d05      	ldr	r5, [sp, #20]
 8005e60:	47a8      	blx	r5
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d03e      	beq.n	8005ee4 <_printf_i+0x200>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	079b      	lsls	r3, r3, #30
 8005e6a:	d415      	bmi.n	8005e98 <_printf_i+0x1b4>
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	68e0      	ldr	r0, [r4, #12]
 8005e70:	4298      	cmp	r0, r3
 8005e72:	da39      	bge.n	8005ee8 <_printf_i+0x204>
 8005e74:	0018      	movs	r0, r3
 8005e76:	e037      	b.n	8005ee8 <_printf_i+0x204>
 8005e78:	0022      	movs	r2, r4
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	3219      	adds	r2, #25
 8005e7e:	9904      	ldr	r1, [sp, #16]
 8005e80:	9803      	ldr	r0, [sp, #12]
 8005e82:	9e05      	ldr	r6, [sp, #20]
 8005e84:	47b0      	blx	r6
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	d02c      	beq.n	8005ee4 <_printf_i+0x200>
 8005e8a:	3501      	adds	r5, #1
 8005e8c:	68e3      	ldr	r3, [r4, #12]
 8005e8e:	9a07      	ldr	r2, [sp, #28]
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	42ab      	cmp	r3, r5
 8005e94:	dcf0      	bgt.n	8005e78 <_printf_i+0x194>
 8005e96:	e7e9      	b.n	8005e6c <_printf_i+0x188>
 8005e98:	2500      	movs	r5, #0
 8005e9a:	e7f7      	b.n	8005e8c <_printf_i+0x1a8>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d0ad      	beq.n	8005dfc <_printf_i+0x118>
 8005ea0:	9d02      	ldr	r5, [sp, #8]
 8005ea2:	0039      	movs	r1, r7
 8005ea4:	f7fa f9be 	bl	8000224 <__aeabi_uidivmod>
 8005ea8:	5c73      	ldrb	r3, [r6, r1]
 8005eaa:	3d01      	subs	r5, #1
 8005eac:	702b      	strb	r3, [r5, #0]
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d1f7      	bne.n	8005ea2 <_printf_i+0x1be>
 8005eb2:	2f08      	cmp	r7, #8
 8005eb4:	d109      	bne.n	8005eca <_printf_i+0x1e6>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	07db      	lsls	r3, r3, #31
 8005eba:	d506      	bpl.n	8005eca <_printf_i+0x1e6>
 8005ebc:	6863      	ldr	r3, [r4, #4]
 8005ebe:	6922      	ldr	r2, [r4, #16]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	dc02      	bgt.n	8005eca <_printf_i+0x1e6>
 8005ec4:	2330      	movs	r3, #48	; 0x30
 8005ec6:	3d01      	subs	r5, #1
 8005ec8:	702b      	strb	r3, [r5, #0]
 8005eca:	9b02      	ldr	r3, [sp, #8]
 8005ecc:	1b5b      	subs	r3, r3, r5
 8005ece:	6123      	str	r3, [r4, #16]
 8005ed0:	9b05      	ldr	r3, [sp, #20]
 8005ed2:	aa07      	add	r2, sp, #28
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	0021      	movs	r1, r4
 8005ed8:	9b04      	ldr	r3, [sp, #16]
 8005eda:	9803      	ldr	r0, [sp, #12]
 8005edc:	f7ff fe94 	bl	8005c08 <_printf_common>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d1b8      	bne.n	8005e56 <_printf_i+0x172>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	4240      	negs	r0, r0
 8005ee8:	b009      	add	sp, #36	; 0x24
 8005eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eec:	0800692d 	.word	0x0800692d
 8005ef0:	0800693e 	.word	0x0800693e

08005ef4 <memchr>:
 8005ef4:	b2c9      	uxtb	r1, r1
 8005ef6:	1882      	adds	r2, r0, r2
 8005ef8:	4290      	cmp	r0, r2
 8005efa:	d101      	bne.n	8005f00 <memchr+0xc>
 8005efc:	2000      	movs	r0, #0
 8005efe:	4770      	bx	lr
 8005f00:	7803      	ldrb	r3, [r0, #0]
 8005f02:	428b      	cmp	r3, r1
 8005f04:	d0fb      	beq.n	8005efe <memchr+0xa>
 8005f06:	3001      	adds	r0, #1
 8005f08:	e7f6      	b.n	8005ef8 <memchr+0x4>

08005f0a <memmove>:
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	4288      	cmp	r0, r1
 8005f0e:	d902      	bls.n	8005f16 <memmove+0xc>
 8005f10:	188b      	adds	r3, r1, r2
 8005f12:	4298      	cmp	r0, r3
 8005f14:	d303      	bcc.n	8005f1e <memmove+0x14>
 8005f16:	2300      	movs	r3, #0
 8005f18:	e007      	b.n	8005f2a <memmove+0x20>
 8005f1a:	5c8b      	ldrb	r3, [r1, r2]
 8005f1c:	5483      	strb	r3, [r0, r2]
 8005f1e:	3a01      	subs	r2, #1
 8005f20:	d2fb      	bcs.n	8005f1a <memmove+0x10>
 8005f22:	bd10      	pop	{r4, pc}
 8005f24:	5ccc      	ldrb	r4, [r1, r3]
 8005f26:	54c4      	strb	r4, [r0, r3]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d1fa      	bne.n	8005f24 <memmove+0x1a>
 8005f2e:	e7f8      	b.n	8005f22 <memmove+0x18>

08005f30 <_free_r>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	0005      	movs	r5, r0
 8005f34:	2900      	cmp	r1, #0
 8005f36:	d010      	beq.n	8005f5a <_free_r+0x2a>
 8005f38:	1f0c      	subs	r4, r1, #4
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da00      	bge.n	8005f42 <_free_r+0x12>
 8005f40:	18e4      	adds	r4, r4, r3
 8005f42:	0028      	movs	r0, r5
 8005f44:	f000 f8d4 	bl	80060f0 <__malloc_lock>
 8005f48:	4a1d      	ldr	r2, [pc, #116]	; (8005fc0 <_free_r+0x90>)
 8005f4a:	6813      	ldr	r3, [r2, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d105      	bne.n	8005f5c <_free_r+0x2c>
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	6014      	str	r4, [r2, #0]
 8005f54:	0028      	movs	r0, r5
 8005f56:	f000 f8cc 	bl	80060f2 <__malloc_unlock>
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	d909      	bls.n	8005f74 <_free_r+0x44>
 8005f60:	6821      	ldr	r1, [r4, #0]
 8005f62:	1860      	adds	r0, r4, r1
 8005f64:	4283      	cmp	r3, r0
 8005f66:	d1f3      	bne.n	8005f50 <_free_r+0x20>
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	1841      	adds	r1, r0, r1
 8005f6e:	6021      	str	r1, [r4, #0]
 8005f70:	e7ee      	b.n	8005f50 <_free_r+0x20>
 8005f72:	0013      	movs	r3, r2
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	d001      	beq.n	8005f7e <_free_r+0x4e>
 8005f7a:	42a2      	cmp	r2, r4
 8005f7c:	d9f9      	bls.n	8005f72 <_free_r+0x42>
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	1858      	adds	r0, r3, r1
 8005f82:	42a0      	cmp	r0, r4
 8005f84:	d10b      	bne.n	8005f9e <_free_r+0x6e>
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	1809      	adds	r1, r1, r0
 8005f8a:	1858      	adds	r0, r3, r1
 8005f8c:	6019      	str	r1, [r3, #0]
 8005f8e:	4282      	cmp	r2, r0
 8005f90:	d1e0      	bne.n	8005f54 <_free_r+0x24>
 8005f92:	6810      	ldr	r0, [r2, #0]
 8005f94:	6852      	ldr	r2, [r2, #4]
 8005f96:	1841      	adds	r1, r0, r1
 8005f98:	6019      	str	r1, [r3, #0]
 8005f9a:	605a      	str	r2, [r3, #4]
 8005f9c:	e7da      	b.n	8005f54 <_free_r+0x24>
 8005f9e:	42a0      	cmp	r0, r4
 8005fa0:	d902      	bls.n	8005fa8 <_free_r+0x78>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	e7d5      	b.n	8005f54 <_free_r+0x24>
 8005fa8:	6821      	ldr	r1, [r4, #0]
 8005faa:	1860      	adds	r0, r4, r1
 8005fac:	4282      	cmp	r2, r0
 8005fae:	d103      	bne.n	8005fb8 <_free_r+0x88>
 8005fb0:	6810      	ldr	r0, [r2, #0]
 8005fb2:	6852      	ldr	r2, [r2, #4]
 8005fb4:	1841      	adds	r1, r0, r1
 8005fb6:	6021      	str	r1, [r4, #0]
 8005fb8:	6062      	str	r2, [r4, #4]
 8005fba:	605c      	str	r4, [r3, #4]
 8005fbc:	e7ca      	b.n	8005f54 <_free_r+0x24>
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	200002c4 	.word	0x200002c4

08005fc4 <_malloc_r>:
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	b570      	push	{r4, r5, r6, lr}
 8005fc8:	1ccd      	adds	r5, r1, #3
 8005fca:	439d      	bics	r5, r3
 8005fcc:	3508      	adds	r5, #8
 8005fce:	0006      	movs	r6, r0
 8005fd0:	2d0c      	cmp	r5, #12
 8005fd2:	d21e      	bcs.n	8006012 <_malloc_r+0x4e>
 8005fd4:	250c      	movs	r5, #12
 8005fd6:	42a9      	cmp	r1, r5
 8005fd8:	d81d      	bhi.n	8006016 <_malloc_r+0x52>
 8005fda:	0030      	movs	r0, r6
 8005fdc:	f000 f888 	bl	80060f0 <__malloc_lock>
 8005fe0:	4a25      	ldr	r2, [pc, #148]	; (8006078 <_malloc_r+0xb4>)
 8005fe2:	6814      	ldr	r4, [r2, #0]
 8005fe4:	0021      	movs	r1, r4
 8005fe6:	2900      	cmp	r1, #0
 8005fe8:	d119      	bne.n	800601e <_malloc_r+0x5a>
 8005fea:	4c24      	ldr	r4, [pc, #144]	; (800607c <_malloc_r+0xb8>)
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <_malloc_r+0x36>
 8005ff2:	0030      	movs	r0, r6
 8005ff4:	f000 f86a 	bl	80060cc <_sbrk_r>
 8005ff8:	6020      	str	r0, [r4, #0]
 8005ffa:	0029      	movs	r1, r5
 8005ffc:	0030      	movs	r0, r6
 8005ffe:	f000 f865 	bl	80060cc <_sbrk_r>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	d12b      	bne.n	800605e <_malloc_r+0x9a>
 8006006:	230c      	movs	r3, #12
 8006008:	0030      	movs	r0, r6
 800600a:	6033      	str	r3, [r6, #0]
 800600c:	f000 f871 	bl	80060f2 <__malloc_unlock>
 8006010:	e003      	b.n	800601a <_malloc_r+0x56>
 8006012:	2d00      	cmp	r5, #0
 8006014:	dadf      	bge.n	8005fd6 <_malloc_r+0x12>
 8006016:	230c      	movs	r3, #12
 8006018:	6033      	str	r3, [r6, #0]
 800601a:	2000      	movs	r0, #0
 800601c:	bd70      	pop	{r4, r5, r6, pc}
 800601e:	680b      	ldr	r3, [r1, #0]
 8006020:	1b5b      	subs	r3, r3, r5
 8006022:	d419      	bmi.n	8006058 <_malloc_r+0x94>
 8006024:	2b0b      	cmp	r3, #11
 8006026:	d903      	bls.n	8006030 <_malloc_r+0x6c>
 8006028:	600b      	str	r3, [r1, #0]
 800602a:	18cc      	adds	r4, r1, r3
 800602c:	6025      	str	r5, [r4, #0]
 800602e:	e003      	b.n	8006038 <_malloc_r+0x74>
 8006030:	684b      	ldr	r3, [r1, #4]
 8006032:	428c      	cmp	r4, r1
 8006034:	d10d      	bne.n	8006052 <_malloc_r+0x8e>
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	0030      	movs	r0, r6
 800603a:	f000 f85a 	bl	80060f2 <__malloc_unlock>
 800603e:	0020      	movs	r0, r4
 8006040:	2207      	movs	r2, #7
 8006042:	300b      	adds	r0, #11
 8006044:	1d23      	adds	r3, r4, #4
 8006046:	4390      	bics	r0, r2
 8006048:	1ac3      	subs	r3, r0, r3
 800604a:	d0e7      	beq.n	800601c <_malloc_r+0x58>
 800604c:	425a      	negs	r2, r3
 800604e:	50e2      	str	r2, [r4, r3]
 8006050:	e7e4      	b.n	800601c <_malloc_r+0x58>
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	000c      	movs	r4, r1
 8006056:	e7ef      	b.n	8006038 <_malloc_r+0x74>
 8006058:	000c      	movs	r4, r1
 800605a:	6849      	ldr	r1, [r1, #4]
 800605c:	e7c3      	b.n	8005fe6 <_malloc_r+0x22>
 800605e:	2303      	movs	r3, #3
 8006060:	1cc4      	adds	r4, r0, #3
 8006062:	439c      	bics	r4, r3
 8006064:	42a0      	cmp	r0, r4
 8006066:	d0e1      	beq.n	800602c <_malloc_r+0x68>
 8006068:	1a21      	subs	r1, r4, r0
 800606a:	0030      	movs	r0, r6
 800606c:	f000 f82e 	bl	80060cc <_sbrk_r>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d1db      	bne.n	800602c <_malloc_r+0x68>
 8006074:	e7c7      	b.n	8006006 <_malloc_r+0x42>
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	200002c4 	.word	0x200002c4
 800607c:	200002c8 	.word	0x200002c8

08006080 <_realloc_r>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	0007      	movs	r7, r0
 8006084:	000d      	movs	r5, r1
 8006086:	0016      	movs	r6, r2
 8006088:	2900      	cmp	r1, #0
 800608a:	d105      	bne.n	8006098 <_realloc_r+0x18>
 800608c:	0011      	movs	r1, r2
 800608e:	f7ff ff99 	bl	8005fc4 <_malloc_r>
 8006092:	0004      	movs	r4, r0
 8006094:	0020      	movs	r0, r4
 8006096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006098:	2a00      	cmp	r2, #0
 800609a:	d103      	bne.n	80060a4 <_realloc_r+0x24>
 800609c:	f7ff ff48 	bl	8005f30 <_free_r>
 80060a0:	0034      	movs	r4, r6
 80060a2:	e7f7      	b.n	8006094 <_realloc_r+0x14>
 80060a4:	f000 f826 	bl	80060f4 <_malloc_usable_size_r>
 80060a8:	002c      	movs	r4, r5
 80060aa:	42b0      	cmp	r0, r6
 80060ac:	d2f2      	bcs.n	8006094 <_realloc_r+0x14>
 80060ae:	0031      	movs	r1, r6
 80060b0:	0038      	movs	r0, r7
 80060b2:	f7ff ff87 	bl	8005fc4 <_malloc_r>
 80060b6:	1e04      	subs	r4, r0, #0
 80060b8:	d0ec      	beq.n	8006094 <_realloc_r+0x14>
 80060ba:	0029      	movs	r1, r5
 80060bc:	0032      	movs	r2, r6
 80060be:	f7ff fc11 	bl	80058e4 <memcpy>
 80060c2:	0029      	movs	r1, r5
 80060c4:	0038      	movs	r0, r7
 80060c6:	f7ff ff33 	bl	8005f30 <_free_r>
 80060ca:	e7e3      	b.n	8006094 <_realloc_r+0x14>

080060cc <_sbrk_r>:
 80060cc:	2300      	movs	r3, #0
 80060ce:	b570      	push	{r4, r5, r6, lr}
 80060d0:	4c06      	ldr	r4, [pc, #24]	; (80060ec <_sbrk_r+0x20>)
 80060d2:	0005      	movs	r5, r0
 80060d4:	0008      	movs	r0, r1
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	f7fb fce4 	bl	8001aa4 <_sbrk>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d103      	bne.n	80060e8 <_sbrk_r+0x1c>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d000      	beq.n	80060e8 <_sbrk_r+0x1c>
 80060e6:	602b      	str	r3, [r5, #0]
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	200005bc 	.word	0x200005bc

080060f0 <__malloc_lock>:
 80060f0:	4770      	bx	lr

080060f2 <__malloc_unlock>:
 80060f2:	4770      	bx	lr

080060f4 <_malloc_usable_size_r>:
 80060f4:	1f0b      	subs	r3, r1, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	1f18      	subs	r0, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da01      	bge.n	8006102 <_malloc_usable_size_r+0xe>
 80060fe:	580b      	ldr	r3, [r1, r0]
 8006100:	18c0      	adds	r0, r0, r3
 8006102:	4770      	bx	lr

08006104 <_init>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr

08006110 <_fini>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr
